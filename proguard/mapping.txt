javax.jmdns.JmDNS -> a.a.a:
    javax.jmdns.ServiceInfo getServiceInfo(java.lang.String,java.lang.String) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> a
    void removeServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> b
    void registerService(javax.jmdns.ServiceInfo) -> a
    void unregisterService(javax.jmdns.ServiceInfo) -> b
javax.jmdns.JmDNS$Delegate -> a.a.b:
    javax.jmdns.NetworkTopologyDiscovery newNetworkTopologyDiscovery() -> a
    javax.jmdns.impl.DNSTaskStarter newDNSTaskStarter$325bdef2() -> b
javax.jmdns.NetworkTopologyDiscovery -> a.a.c:
    java.net.InetAddress[] getInetAddresses() -> a
javax.jmdns.NetworkTopologyDiscovery$Factory -> a.a.d:
    javax.jmdns.NetworkTopologyDiscovery _instance -> a
    java.util.concurrent.atomic.AtomicReference _databaseClassDelegate -> b
    javax.jmdns.NetworkTopologyDiscovery getInstance() -> a
javax.jmdns.ServiceEvent -> a.a.e:
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    javax.jmdns.ServiceInfo getInfo() -> d
    javax.jmdns.ServiceEvent clone() -> e
    java.lang.Object clone() -> clone
javax.jmdns.ServiceInfo -> a.a.f:
    byte[] NO_VALUE -> a
    javax.jmdns.ServiceInfo create$1170637b(java.lang.String,java.lang.String,java.util.Map) -> a
    boolean hasData() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    java.lang.String getKey() -> d
    java.lang.String getQualifiedName() -> e
    java.lang.String getServer() -> f
    java.lang.String[] getHostAddresses() -> g
    java.net.Inet4Address[] getInet4Addresses() -> h
    java.net.Inet6Address[] getInet6Addresses() -> i
    int getPort() -> j
    int getPriority() -> k
    int getWeight() -> l
    byte[] getTextBytes() -> m
    java.lang.String getPropertyString(java.lang.String) -> a
    boolean isPersistent() -> n
    java.lang.String getDomain() -> o
    java.lang.String getProtocol() -> p
    java.lang.String getApplication() -> q
    java.lang.String getSubtype() -> r
    javax.jmdns.ServiceInfo clone() -> s
    java.lang.Object clone() -> clone
javax.jmdns.ServiceInfo$Fields -> a.a.g:
    javax.jmdns.ServiceInfo$Fields Domain -> a
    javax.jmdns.ServiceInfo$Fields Protocol -> b
    javax.jmdns.ServiceInfo$Fields Application -> c
    javax.jmdns.ServiceInfo$Fields Instance -> d
    javax.jmdns.ServiceInfo$Fields Subtype -> e
    javax.jmdns.ServiceInfo$Fields[] $VALUES -> f
    javax.jmdns.ServiceInfo$Fields[] values() -> values
    javax.jmdns.ServiceInfo$Fields valueOf(java.lang.String) -> valueOf
javax.jmdns.ServiceListener -> a.a.h:
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
javax.jmdns.impl.DNSCache -> a.a.a.a:
    java.util.Set _entrySet -> a
    java.util.Set entrySet() -> entrySet
    java.util.Map$Entry getEntry(java.lang.String) -> b
    java.util.List put(java.lang.String,java.util.List) -> a
    java.lang.Object clone() -> clone
    java.util.Collection allValues() -> a
    java.util.Collection getDNSEntryList(java.lang.String) -> a
    java.util.Collection _getDNSEntryList(java.lang.String) -> c
    javax.jmdns.impl.DNSEntry getDNSEntry(javax.jmdns.impl.DNSEntry) -> a
    javax.jmdns.impl.DNSEntry getDNSEntry(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass) -> a
    java.util.Collection getDNSEntryList(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass) -> b
    boolean addDNSEntry(javax.jmdns.impl.DNSEntry) -> b
    boolean removeDNSEntry(javax.jmdns.impl.DNSEntry) -> c
    boolean replaceDNSEntry(javax.jmdns.impl.DNSEntry,javax.jmdns.impl.DNSEntry) -> a
    java.lang.String toString() -> toString
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
javax.jmdns.impl.DNSCache$_CacheEntry -> a.a.a.b:
    java.util.List _value -> a
    java.lang.String _key -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
javax.jmdns.impl.DNSCache$_EmptyCache -> a.a.a.c:
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    java.util.Set entrySet() -> entrySet
    boolean equals(java.lang.Object) -> equals
    java.util.List put(java.lang.String,java.util.List) -> a
    int hashCode() -> hashCode
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
javax.jmdns.impl.DNSEntry -> a.a.a.d:
    java.lang.String _key -> b
    java.lang.String _name -> c
    java.lang.String _type -> d
    javax.jmdns.impl.constants.DNSRecordType _recordType -> e
    javax.jmdns.impl.constants.DNSRecordClass _dnsClass -> f
    boolean _unique -> g
    java.util.Map _qualifiedNameMap -> a
    boolean equals(java.lang.Object) -> equals
    boolean isSameEntry(javax.jmdns.impl.DNSEntry) -> a
    java.lang.String getSubtype() -> a
    java.lang.String getName() -> b
    java.lang.String getType() -> c
    java.lang.String getKey() -> d
    javax.jmdns.impl.constants.DNSRecordType getRecordType() -> e
    javax.jmdns.impl.constants.DNSRecordClass getRecordClass() -> f
    boolean isUnique() -> g
    boolean isServicesDiscoveryMetaQuery() -> h
    boolean isDomainDiscoveryQuery() -> i
    boolean isReverseLookup() -> j
    boolean isV4ReverseLookup() -> k
    boolean isV6ReverseLookup() -> l
    boolean isExpired(long) -> a
    boolean isSameRecordClass(javax.jmdns.impl.DNSEntry) -> b
    boolean isSameType(javax.jmdns.impl.DNSEntry) -> c
    void toByteArray(java.io.DataOutputStream) -> a
    byte[] toByteArray() -> m
    int compareTo(javax.jmdns.impl.DNSEntry) -> d
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSIncoming -> a.a.a.e:
    java.util.logging.Logger logger -> g
    boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET -> a
    java.net.DatagramPacket _packet -> h
    long _receivedTime -> i
    javax.jmdns.impl.DNSIncoming$MessageInputStream _messageInputStream -> j
    int _senderUDPPayload -> k
    char[] _nibbleToHex -> l
    javax.jmdns.impl.DNSIncoming clone() -> a
    javax.jmdns.impl.DNSRecord readAnswer(java.net.InetAddress) -> a
    java.lang.String print$56aeb37f() -> b
    java.lang.String toString() -> toString
    void append(javax.jmdns.impl.DNSIncoming) -> a
    int elapseSinceArrival() -> c
    int getSenderUDPPayload() -> d
    java.lang.String _hexString(byte[]) -> b
    java.lang.Object clone() -> clone
javax.jmdns.impl.DNSIncoming$1 -> a.a.a.f:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSLabel -> a
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSOptionCode -> b
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> c
javax.jmdns.impl.DNSIncoming$MessageInputStream -> a.a.a.g:
    java.util.logging.Logger logger1 -> a
    java.util.Map _names -> b
    int readUnsignedShort() -> a
    int readInt() -> b
    byte[] readBytes(int) -> a
    java.lang.String readUTF(int) -> b
    java.lang.String readName() -> c
    java.lang.String readNonNameString() -> d
javax.jmdns.impl.DNSListener -> a.a.a.h:
    void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry) -> a
javax.jmdns.impl.DNSMessage -> a.a.a.i:
    int _id -> a
    boolean _multicast -> b
    int _flags -> g
    java.util.List _questions -> c
    java.util.List _answers -> d
    java.util.List _authoritativeAnswers -> e
    java.util.List _additionals -> f
    int getId() -> e
    void setId(int) -> a
    int getFlags() -> f
    void setFlags(int) -> b
    boolean isMulticast() -> g
    java.util.Collection getQuestions() -> h
    int getNumberOfQuestions() -> i
    java.util.Collection getAllAnswers() -> j
    java.util.Collection getAnswers() -> k
    int getNumberOfAnswers() -> l
    java.util.Collection getAuthorities() -> m
    int getNumberOfAuthorities() -> n
    java.util.Collection getAdditionals() -> o
    int getNumberOfAdditionals() -> p
    boolean isTruncated() -> q
    boolean isQuery() -> r
    boolean isEmpty() -> s
    java.lang.String print() -> t
    java.lang.String print(byte[]) -> a
javax.jmdns.impl.DNSOutgoing -> a.a.a.j:
    boolean USE_DOMAIN_NAME_COMPRESSION -> a
    java.util.Map _names -> g
    int _maxUDPPayload -> h
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _questionsBytes -> i
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _answersBytes -> j
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _authoritativeAnswersBytes -> k
    javax.jmdns.impl.DNSOutgoing$MessageOutputStream _additionalsAnswersBytes -> l
    int availableSpace() -> c
    void addQuestion(javax.jmdns.impl.DNSQuestion) -> a
    void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord) -> a
    void addAnswer(javax.jmdns.impl.DNSRecord,long) -> a
    void addAuthorativeAnswer(javax.jmdns.impl.DNSRecord) -> a
    byte[] data() -> a
    boolean isQuery() -> r
    java.lang.String toString() -> toString
    int getMaxUDPPayload() -> b
javax.jmdns.impl.DNSOutgoing$MessageOutputStream -> a.a.a.k:
    javax.jmdns.impl.DNSOutgoing _out -> a
    int _offset -> b
    void writeBytes$1cf967a4(byte[],int) -> a
    void writeShort(int) -> a
    void writeUTF$44bd8e9f(java.lang.String,int) -> a
    void writeName(java.lang.String) -> a
    void writeQuestion(javax.jmdns.impl.DNSQuestion) -> a
    void writeRecord(javax.jmdns.impl.DNSRecord,long) -> a
javax.jmdns.impl.DNSQuestion -> a.a.a.l:
    java.util.logging.Logger logger -> b
    javax.jmdns.impl.DNSQuestion newQuestion(java.lang.String,javax.jmdns.impl.constants.DNSRecordType,javax.jmdns.impl.constants.DNSRecordClass,boolean) -> a
    boolean answeredBy(javax.jmdns.impl.DNSEntry) -> e
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    void addAnswersForServiceInfo(javax.jmdns.impl.JmDNSImpl,java.util.Set,javax.jmdns.impl.ServiceInfoImpl) -> a
    boolean isExpired(long) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSQuestion$1 -> a.a.a.m:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.DNSQuestion$AllRecords -> a.a.a.n:
    boolean isSameType(javax.jmdns.impl.DNSEntry) -> c
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$DNS4Address -> a.a.a.o:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$DNS6Address -> a.a.a.p:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$HostInformation -> a.a.a.q:
javax.jmdns.impl.DNSQuestion$Pointer -> a.a.a.r:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
javax.jmdns.impl.DNSQuestion$Service -> a.a.a.s:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSQuestion$Text -> a.a.a.t:
    void addAnswers(javax.jmdns.impl.JmDNSImpl,java.util.Set) -> a
    boolean iAmTheOnlyOne(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.DNSRecord -> a.a.a.u:
    int _ttl -> c
    long _created -> d
    java.net.InetAddress _source -> e
    byte[] EMPTY_TXT -> b
    boolean equals(java.lang.Object) -> equals
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean sameType(javax.jmdns.impl.DNSRecord) -> b
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    boolean suppressedBy(javax.jmdns.impl.DNSIncoming) -> a
    long getExpirationTime(int) -> a
    int getRemainingTTL(long) -> b
    boolean isExpired(long) -> a
    boolean isStale(long) -> c
    void resetTTL(javax.jmdns.impl.DNSRecord) -> c
    void setWillExpireSoon(long) -> d
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean isSingleValued() -> m
    javax.jmdns.ServiceInfo getServiceInfo() -> n
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void setRecordSource(java.net.InetAddress) -> a
    java.net.InetAddress getRecordSource() -> o
    void toString(java.lang.StringBuilder) -> a
    int getTTL() -> p
javax.jmdns.impl.DNSRecord$Address -> a.a.a.v:
    java.net.InetAddress _addr -> c
    boolean sameName(javax.jmdns.impl.DNSRecord) -> d
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> m
    java.net.InetAddress getAddress() -> q
    void toByteArray(java.io.DataOutputStream) -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$HostInformation -> a.a.a.w:
    java.lang.String _os -> c
    java.lang.String _cpu -> d
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> m
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$IPv4Address -> a.a.a.x:
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
javax.jmdns.impl.DNSRecord$IPv6Address -> a.a.a.y:
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
javax.jmdns.impl.DNSRecord$Pointer -> a.a.a.z:
    java.lang.String _alias -> c
    boolean isSameEntry(javax.jmdns.impl.DNSEntry) -> a
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> m
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    java.lang.String getAlias() -> q
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$Service -> a.a.a.aa:
    java.util.logging.Logger logger1 -> c
    int _priority -> d
    int _weight -> e
    int _port -> f
    java.lang.String _server -> g
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    void toByteArray(java.io.DataOutputStream) -> a
    java.lang.String getServer() -> q
    int getPriority() -> r
    int getWeight() -> s
    int getPort() -> t
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> m
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSRecord$Text -> a.a.a.ab:
    byte[] _text -> c
    byte[] getText() -> q
    void write(javax.jmdns.impl.DNSOutgoing$MessageOutputStream) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean isSingleValued() -> m
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    javax.jmdns.ServiceInfo getServiceInfo(boolean) -> a
    javax.jmdns.ServiceEvent getServiceEvent(javax.jmdns.impl.JmDNSImpl) -> c
    void toString(java.lang.StringBuilder) -> a
javax.jmdns.impl.DNSStatefulObject -> a.a.a.ac:
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore -> a.a.a.ad:
    java.lang.String _name -> a
    java.util.concurrent.ConcurrentMap _semaphores -> b
    void waitForEvent(long) -> a
    void signalEvent() -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSStatefulObject$DefaultImplementation -> a.a.a.ae:
    java.util.logging.Logger logger -> c
    javax.jmdns.impl.JmDNSImpl _dns -> d
    javax.jmdns.impl.tasks.DNSTask _task -> a
    javax.jmdns.impl.constants.DNSState _state -> b
    javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore _announcing -> e
    javax.jmdns.impl.DNSStatefulObject$DNSStatefulObjectSemaphore _canceling -> f
    javax.jmdns.impl.JmDNSImpl getDns() -> a
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    void setTask(javax.jmdns.impl.tasks.DNSTask) -> c
    void setState(javax.jmdns.impl.constants.DNSState) -> a
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> b
    boolean cancelState() -> c
    boolean closeState() -> d
    boolean recoverState() -> e
    boolean isProbing() -> f
    boolean isAnnouncing() -> g
    boolean isAnnounced() -> h
    boolean isCanceling() -> i
    boolean isCanceled() -> j
    boolean isClosing() -> k
    boolean isClosed() -> l
    boolean willCancel() -> m
    boolean willClose() -> n
    boolean waitForAnnounced(long) -> a
    boolean waitForCanceled(long) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSTaskStarter -> a.a.a.af:
    void purgeTimer() -> a
    void purgeStateTimer() -> b
    void cancelTimer() -> c
    void cancelStateTimer() -> d
    void startProber() -> e
    void startAnnouncer() -> f
    void startRenewer() -> g
    void startCanceler() -> h
    void startReaper() -> i
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> a
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> a
javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl -> a.a.a.ag:
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> a
    java.util.Timer _timer -> b
    java.util.Timer _stateTimer -> c
    void purgeTimer() -> a
    void purgeStateTimer() -> b
    void cancelTimer() -> c
    void cancelStateTimer() -> d
    void startProber() -> e
    void startAnnouncer() -> f
    void startRenewer() -> g
    void startCanceler() -> h
    void startReaper() -> i
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> a
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> a
javax.jmdns.impl.DNSTaskStarter$DNSTaskStarterImpl$StarterTimer -> a.a.a.ah:
    boolean _cancelled -> a
    void cancel() -> cancel
    void schedule(java.util.TimerTask,long) -> schedule
    void schedule(java.util.TimerTask,java.util.Date) -> schedule
    void schedule(java.util.TimerTask,long,long) -> schedule
    void schedule(java.util.TimerTask,java.util.Date,long) -> schedule
    void scheduleAtFixedRate(java.util.TimerTask,long,long) -> scheduleAtFixedRate
    void scheduleAtFixedRate(java.util.TimerTask,java.util.Date,long) -> scheduleAtFixedRate
javax.jmdns.impl.DNSTaskStarter$Factory -> a.a.a.ai:
    javax.jmdns.impl.DNSTaskStarter$Factory _instance -> a
    java.util.concurrent.ConcurrentMap _instances -> b
    java.util.concurrent.atomic.AtomicReference _databaseClassDelegate -> c
    javax.jmdns.impl.DNSTaskStarter$Factory getInstance() -> a
    javax.jmdns.impl.DNSTaskStarter getStarter(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.HostInfo -> a.a.a.aj:
    java.util.logging.Logger logger -> a
    java.lang.String _name -> b
    java.net.InetAddress _address -> c
    java.net.NetworkInterface _interfaze -> d
    javax.jmdns.impl.HostInfo$HostInfoState _state -> e
    int hostNameCount -> f
    javax.jmdns.impl.HostInfo newHostInfo(java.net.InetAddress,javax.jmdns.impl.JmDNSImpl,java.lang.String) -> a
    java.net.InetAddress loopbackAddress() -> q
    java.lang.String getName() -> a
    java.net.InetAddress getInetAddress() -> b
    java.net.Inet4Address getInet4Address() -> c
    java.net.Inet6Address getInet6Address() -> d
    java.net.NetworkInterface getInterface() -> e
    boolean conflictWithRecord(javax.jmdns.impl.DNSRecord$Address) -> a
    java.lang.String incrementHostName() -> f
    boolean shouldIgnorePacket(java.net.DatagramPacket) -> a
    javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord$5cb90664(javax.jmdns.impl.constants.DNSRecordType,boolean) -> a
    javax.jmdns.impl.DNSRecord$Address getDNS4AddressRecord(boolean,int) -> b
    javax.jmdns.impl.DNSRecord$Address getDNS6AddressRecord(boolean,int) -> c
    javax.jmdns.impl.DNSRecord$Pointer getDNSReverseAddressRecord$7b3a073(javax.jmdns.impl.constants.DNSRecordType) -> a
    java.lang.String toString() -> toString
    java.util.Collection answers(boolean,int) -> a
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean revertState() -> g
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean cancelState() -> h
    boolean closeState() -> i
    boolean recoverState() -> j
    boolean isProbing() -> k
    boolean isAnnounced() -> l
    boolean isCanceling() -> m
    boolean isCanceled() -> n
    boolean isClosing() -> o
    boolean isClosed() -> p
    boolean waitForAnnounced(long) -> a
    boolean waitForCanceled(long) -> b
javax.jmdns.impl.HostInfo$1 -> a.a.a.ak:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.HostInfo$HostInfoState -> a.a.a.al:
javax.jmdns.impl.JmDNSImpl -> a.a.a.am:
    java.util.logging.Logger logger -> a
    java.net.InetAddress _group -> b
    java.net.MulticastSocket _socket -> c
    java.util.List _listeners -> d
    java.util.concurrent.ConcurrentMap _serviceListeners -> e
    java.util.Set _typeListeners -> f
    javax.jmdns.impl.DNSCache _cache -> g
    java.util.concurrent.ConcurrentMap _services -> h
    java.util.concurrent.ConcurrentMap _serviceTypes -> i
    javax.jmdns.impl.HostInfo _localHost -> j
    java.lang.Thread _incomingListener -> k
    int _throttle -> l
    long _lastThrottleIncrement -> m
    java.util.concurrent.ExecutorService _executor -> n
    java.util.Random _random -> o
    java.util.concurrent.locks.ReentrantLock _ioLock -> p
    javax.jmdns.impl.DNSIncoming _plannedAnswer -> q
    java.util.concurrent.ConcurrentMap _serviceCollectors -> r
    java.lang.String _name -> s
    java.lang.Object _recoverLock -> t
    void start(java.util.Collection) -> a
    void openMulticastSocket(javax.jmdns.impl.HostInfo) -> a
    void closeMulticastSocket() -> D
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> j
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean isProbing() -> k
    boolean isAnnounced() -> l
    boolean isCanceling() -> m
    boolean isCanceled() -> n
    boolean isClosing() -> o
    boolean isClosed() -> p
    javax.jmdns.impl.DNSCache getCache() -> q
    java.lang.String getName() -> r
    javax.jmdns.impl.HostInfo getLocalHost() -> s
    java.net.InetAddress getInetAddress() -> t
    javax.jmdns.ServiceInfo getServiceInfo(java.lang.String,java.lang.String) -> a
    javax.jmdns.impl.ServiceInfoImpl resolveServiceInfo(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    javax.jmdns.impl.ServiceInfoImpl getServiceInfoFromCache(java.lang.String,java.lang.String,java.lang.String,boolean) -> b
    void handleServiceResolved(javax.jmdns.ServiceEvent) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener,boolean) -> a
    void removeServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> b
    void registerService(javax.jmdns.ServiceInfo) -> a
    void unregisterService(javax.jmdns.ServiceInfo) -> b
    void unregisterAllServices() -> E
    boolean registerServiceType(java.lang.String) -> c
    boolean makeServiceNameUnique(javax.jmdns.impl.ServiceInfoImpl) -> b
    java.lang.String incrementName(java.lang.String) -> b
    void addListener(javax.jmdns.impl.DNSListener,javax.jmdns.impl.DNSQuestion) -> a
    void removeListener(javax.jmdns.impl.DNSListener) -> a
    void updateRecord(long,javax.jmdns.impl.DNSRecord,javax.jmdns.impl.JmDNSImpl$Operation) -> a
    void handleRecord(javax.jmdns.impl.DNSRecord,long) -> a
    void handleResponse(javax.jmdns.impl.DNSIncoming) -> a
    void handleQuery$7a05e58d(javax.jmdns.impl.DNSIncoming,int) -> b
    void respondToQuery(javax.jmdns.impl.DNSIncoming) -> b
    void send(javax.jmdns.impl.DNSOutgoing) -> a
    void purgeTimer() -> a
    void purgeStateTimer() -> b
    void cancelTimer() -> c
    void cancelStateTimer() -> d
    void startProber() -> e
    void startAnnouncer() -> f
    void startRenewer() -> g
    void startCanceler() -> h
    void startReaper() -> i
    void startServiceInfoResolver(javax.jmdns.impl.ServiceInfoImpl) -> a
    void startServiceResolver(java.lang.String) -> a
    void startResponder(javax.jmdns.impl.DNSIncoming,int) -> a
    void recover() -> u
    void __recover() -> v
    void cleanCache() -> w
    void close() -> close
    java.lang.String toString() -> toString
    void disposeServiceCollectors() -> F
    java.lang.String toUnqualifiedName(java.lang.String,java.lang.String) -> b
    java.util.Map getServices() -> x
    void setLastThrottleIncrement(long) -> a
    long getLastThrottleIncrement() -> y
    void setThrottle(int) -> a
    int getThrottle() -> z
    java.util.Random getRandom() -> A
    java.util.Map getServiceTypes() -> B
    java.net.MulticastSocket getSocket() -> C
javax.jmdns.impl.JmDNSImpl$1 -> a.a.a.an:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    void run() -> run
javax.jmdns.impl.JmDNSImpl$2 -> a.a.a.ao:
    javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus val$status -> a
    javax.jmdns.ServiceEvent val$event -> b
    void run() -> run
javax.jmdns.impl.JmDNSImpl$3 -> a.a.a.ap:
    javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus val$status -> a
    javax.jmdns.ServiceEvent val$event -> b
    void run() -> run
javax.jmdns.impl.JmDNSImpl$4 -> a.a.a.aq:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    void run() -> run
javax.jmdns.impl.JmDNSImpl$5 -> a.a.a.ar:
    javax.jmdns.impl.ListenerStatus$ServiceListenerStatus val$listener -> a
    javax.jmdns.ServiceEvent val$localEvent -> b
    void run() -> run
javax.jmdns.impl.JmDNSImpl$6 -> a.a.a.as:
    javax.jmdns.impl.JmDNSImpl this$0 -> a
    void run() -> run
javax.jmdns.impl.JmDNSImpl$7 -> a.a.a.at:
    int[] $SwitchMap$javax$jmdns$impl$JmDNSImpl$Operation -> a
javax.jmdns.impl.JmDNSImpl$Operation -> a.a.a.au:
    javax.jmdns.impl.JmDNSImpl$Operation Remove -> a
    javax.jmdns.impl.JmDNSImpl$Operation Update -> b
    javax.jmdns.impl.JmDNSImpl$Operation Add -> c
    javax.jmdns.impl.JmDNSImpl$Operation RegisterServiceType -> d
    javax.jmdns.impl.JmDNSImpl$Operation Noop -> e
    javax.jmdns.impl.JmDNSImpl$Operation[] $VALUES -> f
    javax.jmdns.impl.JmDNSImpl$Operation[] values() -> values
    javax.jmdns.impl.JmDNSImpl$Operation valueOf(java.lang.String) -> valueOf
javax.jmdns.impl.JmDNSImpl$ServiceCollector -> a.a.a.av:
    java.util.concurrent.ConcurrentMap _infos -> a
    java.util.concurrent.ConcurrentMap _events -> b
    java.lang.String _type -> c
    boolean _needToWaitForInfos -> d
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    java.lang.String toString() -> toString
javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry -> a.a.a.aw:
    java.util.Set _entrySet -> a
    java.lang.String _type -> b
    java.lang.String getType() -> a
    java.util.Set entrySet() -> entrySet
    boolean contains(java.lang.String) -> a
    boolean add(java.lang.String) -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
javax.jmdns.impl.JmDNSImpl$ServiceTypeEntry$SubTypeEntry -> a.a.a.ax:
    java.lang.String _key -> a
    java.lang.String _value -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
javax.jmdns.impl.ListenerStatus -> a.a.a.ay:
    java.util.EventListener _listener -> a
    boolean _synch -> b
    java.util.EventListener getListener() -> a
    boolean isSynchronous() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
javax.jmdns.impl.ListenerStatus$ServiceListenerStatus -> a.a.a.az:
    java.util.logging.Logger logger -> a
    java.util.concurrent.ConcurrentMap _addedServices -> b
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    boolean _sameInfo(javax.jmdns.ServiceInfo,javax.jmdns.ServiceInfo) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.ListenerStatus$ServiceTypeListenerStatus -> a.a.a.ba:
    java.util.concurrent.ConcurrentMap _addedTypes -> a
    void serviceTypeAdded(javax.jmdns.ServiceEvent) -> a
    void subTypeForServiceTypeAdded(javax.jmdns.ServiceEvent) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.NetworkTopologyDiscoveryImpl -> a.a.a.bb:
    java.util.logging.Logger logger -> a
    java.lang.reflect.Method _isUp -> b
    java.lang.reflect.Method _supportsMulticast -> c
    java.net.InetAddress[] getInetAddresses() -> a
    boolean useInetAddress(java.net.NetworkInterface,java.net.InetAddress) -> a
javax.jmdns.impl.ServiceEventImpl -> a.a.a.bc:
    java.lang.String _type -> a
    java.lang.String _name -> b
    javax.jmdns.ServiceInfo _info -> c
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    java.lang.String toString() -> toString
    javax.jmdns.ServiceInfo getInfo() -> d
    javax.jmdns.impl.ServiceEventImpl clone() -> f
    javax.jmdns.ServiceEvent clone() -> e
    java.lang.Object clone() -> clone
javax.jmdns.impl.ServiceInfoImpl -> a.a.a.bd:
    java.lang.String _domain -> b
    java.lang.String _protocol -> c
    java.lang.String _application -> d
    java.lang.String _name -> e
    java.lang.String _subtype -> f
    java.lang.String _server -> g
    int _port -> h
    int _weight -> i
    int _priority -> j
    byte[] _text -> k
    java.util.Map _props -> l
    java.util.Set _ipv4Addresses -> m
    java.util.Set _ipv6Addresses -> n
    java.lang.String _key -> o
    boolean _persistent -> p
    boolean _needTextAnnouncing -> q
    javax.jmdns.impl.ServiceInfoImpl$ServiceInfoState _state -> r
    java.util.Map decodeQualifiedNameMap(java.lang.String,java.lang.String,java.lang.String) -> a
    java.util.Map decodeQualifiedNameMapForType(java.lang.String) -> b
    java.util.Map checkQualifiedNameMap(java.util.Map) -> a
    java.lang.String removeSeparators(java.lang.String) -> e
    java.lang.String getType() -> b
    java.lang.String getTypeWithSubtype() -> t
    java.lang.String getName() -> c
    java.lang.String getKey() -> d
    void setName(java.lang.String) -> c
    java.lang.String getQualifiedName() -> e
    java.lang.String getServer() -> f
    void setServer(java.lang.String) -> d
    java.lang.String[] getHostAddresses() -> g
    void addAddress(java.net.Inet4Address) -> a
    void addAddress(java.net.Inet6Address) -> a
    java.net.Inet4Address[] getInet4Addresses() -> h
    java.net.Inet6Address[] getInet6Addresses() -> i
    int getPort() -> j
    int getPriority() -> k
    int getWeight() -> l
    byte[] getTextBytes() -> m
    java.lang.String getPropertyString(java.lang.String) -> a
    java.lang.String getApplication() -> q
    java.lang.String getDomain() -> o
    java.lang.String getProtocol() -> p
    java.lang.String getSubtype() -> r
    java.util.Map getQualifiedNameMap() -> u
    void writeUTF(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readUTF(byte[],int,int) -> a
    java.util.Map getProperties() -> G
    void updateRecord(javax.jmdns.impl.DNSCache,long,javax.jmdns.impl.DNSEntry) -> a
    boolean hasData() -> a
    boolean advanceState(javax.jmdns.impl.tasks.DNSTask) -> a
    boolean revertState() -> v
    boolean cancelState() -> w
    boolean recoverState() -> x
    void removeAssociationWithTask(javax.jmdns.impl.tasks.DNSTask) -> b
    void associateWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> a
    boolean isAssociatedWithTask(javax.jmdns.impl.tasks.DNSTask,javax.jmdns.impl.constants.DNSState) -> b
    boolean isProbing() -> y
    boolean isAnnouncing() -> z
    boolean isAnnounced() -> A
    boolean waitForAnnounced$1349f3() -> B
    boolean waitForCanceled$1349f3() -> C
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    javax.jmdns.impl.ServiceInfoImpl clone() -> H
    java.lang.String toString() -> toString
    java.util.Collection answers$58f623d3(int,javax.jmdns.impl.HostInfo) -> a
    void _setText(byte[]) -> a
    byte[] textFromProperties(java.util.Map) -> b
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
    javax.jmdns.impl.JmDNSImpl getDns() -> D
    boolean isPersistent() -> n
    void setNeedTextAnnouncing$1385ff() -> E
    boolean needTextAnnouncing() -> F
    javax.jmdns.ServiceInfo clone() -> s
    java.lang.Object clone() -> clone
javax.jmdns.impl.ServiceInfoImpl$1 -> a.a.a.be:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSRecordType -> a
javax.jmdns.impl.ServiceInfoImpl$ServiceInfoState -> a.a.a.bf:
    javax.jmdns.impl.ServiceInfoImpl _info -> c
    void setTask(javax.jmdns.impl.tasks.DNSTask) -> c
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.SocketListener -> a.a.a.bg:
    java.util.logging.Logger logger -> a
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> b
    void run() -> run
javax.jmdns.impl.constants.DNSConstants -> a.a.a.a.a:
    int MDNS_PORT -> a
javax.jmdns.impl.constants.DNSLabel -> a.a.a.a.b:
    javax.jmdns.impl.constants.DNSLabel Unknown -> a
    javax.jmdns.impl.constants.DNSLabel Standard -> b
    javax.jmdns.impl.constants.DNSLabel Compressed -> c
    javax.jmdns.impl.constants.DNSLabel Extended -> d
    int _index -> e
    javax.jmdns.impl.constants.DNSLabel[] $VALUES -> f
    javax.jmdns.impl.constants.DNSLabel[] values() -> values
    javax.jmdns.impl.constants.DNSLabel valueOf(java.lang.String) -> valueOf
    javax.jmdns.impl.constants.DNSLabel labelForByte(int) -> a
    int labelValue(int) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSOptionCode -> a.a.a.a.c:
    javax.jmdns.impl.constants.DNSOptionCode Unknown -> a
    javax.jmdns.impl.constants.DNSOptionCode LLQ -> b
    javax.jmdns.impl.constants.DNSOptionCode UL -> c
    javax.jmdns.impl.constants.DNSOptionCode NSID -> d
    javax.jmdns.impl.constants.DNSOptionCode Owner -> e
    int _index -> f
    javax.jmdns.impl.constants.DNSOptionCode[] $VALUES -> g
    javax.jmdns.impl.constants.DNSOptionCode[] values() -> values
    javax.jmdns.impl.constants.DNSOptionCode valueOf(java.lang.String) -> valueOf
    javax.jmdns.impl.constants.DNSOptionCode resultCodeForFlags(int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSRecordClass -> a.a.a.a.d:
    javax.jmdns.impl.constants.DNSRecordClass CLASS_UNKNOWN -> a
    javax.jmdns.impl.constants.DNSRecordClass CLASS_IN -> b
    javax.jmdns.impl.constants.DNSRecordClass CLASS_CS -> d
    javax.jmdns.impl.constants.DNSRecordClass CLASS_CH -> e
    javax.jmdns.impl.constants.DNSRecordClass CLASS_HS -> f
    javax.jmdns.impl.constants.DNSRecordClass CLASS_NONE -> g
    javax.jmdns.impl.constants.DNSRecordClass CLASS_ANY -> c
    int _index -> h
    javax.jmdns.impl.constants.DNSRecordClass[] $VALUES -> i
    javax.jmdns.impl.constants.DNSRecordClass[] values() -> values
    javax.jmdns.impl.constants.DNSRecordClass valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    boolean isUnique(int) -> a
    javax.jmdns.impl.constants.DNSRecordClass classForIndex(int) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSRecordType -> a.a.a.a.e:
    javax.jmdns.impl.constants.DNSRecordType TYPE_IGNORE -> a
    javax.jmdns.impl.constants.DNSRecordType TYPE_A -> b
    javax.jmdns.impl.constants.DNSRecordType TYPE_NS -> l
    javax.jmdns.impl.constants.DNSRecordType TYPE_MD -> m
    javax.jmdns.impl.constants.DNSRecordType TYPE_MF -> n
    javax.jmdns.impl.constants.DNSRecordType TYPE_CNAME -> c
    javax.jmdns.impl.constants.DNSRecordType TYPE_SOA -> o
    javax.jmdns.impl.constants.DNSRecordType TYPE_MB -> p
    javax.jmdns.impl.constants.DNSRecordType TYPE_MG -> q
    javax.jmdns.impl.constants.DNSRecordType TYPE_MR -> r
    javax.jmdns.impl.constants.DNSRecordType TYPE_NULL -> s
    javax.jmdns.impl.constants.DNSRecordType TYPE_WKS -> t
    javax.jmdns.impl.constants.DNSRecordType TYPE_PTR -> d
    javax.jmdns.impl.constants.DNSRecordType TYPE_HINFO -> e
    javax.jmdns.impl.constants.DNSRecordType TYPE_MINFO -> u
    javax.jmdns.impl.constants.DNSRecordType TYPE_MX -> v
    javax.jmdns.impl.constants.DNSRecordType TYPE_TXT -> f
    javax.jmdns.impl.constants.DNSRecordType TYPE_RP -> w
    javax.jmdns.impl.constants.DNSRecordType TYPE_AFSDB -> x
    javax.jmdns.impl.constants.DNSRecordType TYPE_X25 -> y
    javax.jmdns.impl.constants.DNSRecordType TYPE_ISDN -> z
    javax.jmdns.impl.constants.DNSRecordType TYPE_RT -> A
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSAP -> B
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSAP_PTR -> C
    javax.jmdns.impl.constants.DNSRecordType TYPE_SIG -> D
    javax.jmdns.impl.constants.DNSRecordType TYPE_KEY -> E
    javax.jmdns.impl.constants.DNSRecordType TYPE_PX -> F
    javax.jmdns.impl.constants.DNSRecordType TYPE_GPOS -> G
    javax.jmdns.impl.constants.DNSRecordType TYPE_AAAA -> g
    javax.jmdns.impl.constants.DNSRecordType TYPE_LOC -> H
    javax.jmdns.impl.constants.DNSRecordType TYPE_NXT -> I
    javax.jmdns.impl.constants.DNSRecordType TYPE_EID -> J
    javax.jmdns.impl.constants.DNSRecordType TYPE_NIMLOC -> K
    javax.jmdns.impl.constants.DNSRecordType TYPE_SRV -> h
    javax.jmdns.impl.constants.DNSRecordType TYPE_ATMA -> L
    javax.jmdns.impl.constants.DNSRecordType TYPE_NAPTR -> M
    javax.jmdns.impl.constants.DNSRecordType TYPE_KX -> N
    javax.jmdns.impl.constants.DNSRecordType TYPE_CERT -> O
    javax.jmdns.impl.constants.DNSRecordType TYPE_A6 -> i
    javax.jmdns.impl.constants.DNSRecordType TYPE_DNAME -> P
    javax.jmdns.impl.constants.DNSRecordType TYPE_SINK -> Q
    javax.jmdns.impl.constants.DNSRecordType TYPE_OPT -> j
    javax.jmdns.impl.constants.DNSRecordType TYPE_APL -> R
    javax.jmdns.impl.constants.DNSRecordType TYPE_DS -> S
    javax.jmdns.impl.constants.DNSRecordType TYPE_SSHFP -> T
    javax.jmdns.impl.constants.DNSRecordType TYPE_RRSIG -> U
    javax.jmdns.impl.constants.DNSRecordType TYPE_NSEC -> V
    javax.jmdns.impl.constants.DNSRecordType TYPE_DNSKEY -> W
    javax.jmdns.impl.constants.DNSRecordType TYPE_UINFO -> X
    javax.jmdns.impl.constants.DNSRecordType TYPE_UID -> Y
    javax.jmdns.impl.constants.DNSRecordType TYPE_GID -> Z
    javax.jmdns.impl.constants.DNSRecordType TYPE_UNSPEC -> aa
    javax.jmdns.impl.constants.DNSRecordType TYPE_TKEY -> ab
    javax.jmdns.impl.constants.DNSRecordType TYPE_TSIG -> ac
    javax.jmdns.impl.constants.DNSRecordType TYPE_IXFR -> ad
    javax.jmdns.impl.constants.DNSRecordType TYPE_AXFR -> ae
    javax.jmdns.impl.constants.DNSRecordType TYPE_MAILA -> af
    javax.jmdns.impl.constants.DNSRecordType TYPE_MAILB -> ag
    javax.jmdns.impl.constants.DNSRecordType TYPE_ANY -> k
    java.util.logging.Logger logger -> ah
    int _index -> ai
    javax.jmdns.impl.constants.DNSRecordType[] $VALUES -> aj
    javax.jmdns.impl.constants.DNSRecordType[] values() -> values
    javax.jmdns.impl.constants.DNSRecordType valueOf(java.lang.String) -> valueOf
    int indexValue() -> a
    javax.jmdns.impl.constants.DNSRecordType typeForIndex(int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSResultCode -> a.a.a.a.f:
    javax.jmdns.impl.constants.DNSResultCode Unknown -> a
    javax.jmdns.impl.constants.DNSResultCode NoError -> b
    javax.jmdns.impl.constants.DNSResultCode FormErr -> c
    javax.jmdns.impl.constants.DNSResultCode ServFail -> d
    javax.jmdns.impl.constants.DNSResultCode NXDomain -> e
    javax.jmdns.impl.constants.DNSResultCode NotImp -> f
    javax.jmdns.impl.constants.DNSResultCode Refused -> g
    javax.jmdns.impl.constants.DNSResultCode YXDomain -> h
    javax.jmdns.impl.constants.DNSResultCode YXRRSet -> i
    javax.jmdns.impl.constants.DNSResultCode NXRRSet -> j
    javax.jmdns.impl.constants.DNSResultCode NotAuth -> k
    javax.jmdns.impl.constants.DNSResultCode NotZone -> l
    int _index -> m
    javax.jmdns.impl.constants.DNSResultCode[] $VALUES -> n
    javax.jmdns.impl.constants.DNSResultCode[] values() -> values
    javax.jmdns.impl.constants.DNSResultCode valueOf(java.lang.String) -> valueOf
    javax.jmdns.impl.constants.DNSResultCode resultCodeForFlags(int,int) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.constants.DNSState -> a.a.a.a.g:
    javax.jmdns.impl.constants.DNSState PROBING_1 -> a
    javax.jmdns.impl.constants.DNSState PROBING_2 -> b
    javax.jmdns.impl.constants.DNSState PROBING_3 -> c
    javax.jmdns.impl.constants.DNSState ANNOUNCING_1 -> d
    javax.jmdns.impl.constants.DNSState ANNOUNCING_2 -> e
    javax.jmdns.impl.constants.DNSState ANNOUNCED -> f
    javax.jmdns.impl.constants.DNSState CANCELING_1 -> g
    javax.jmdns.impl.constants.DNSState CANCELING_2 -> h
    javax.jmdns.impl.constants.DNSState CANCELING_3 -> i
    javax.jmdns.impl.constants.DNSState CANCELED -> j
    javax.jmdns.impl.constants.DNSState CLOSING -> k
    javax.jmdns.impl.constants.DNSState CLOSED -> l
    java.lang.String _name -> m
    javax.jmdns.impl.constants.DNSState$StateClass _state -> n
    javax.jmdns.impl.constants.DNSState[] $VALUES -> o
    javax.jmdns.impl.constants.DNSState[] values() -> values
    javax.jmdns.impl.constants.DNSState valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    javax.jmdns.impl.constants.DNSState advance() -> a
    javax.jmdns.impl.constants.DNSState revert() -> b
    boolean isProbing() -> c
    boolean isAnnouncing() -> d
    boolean isAnnounced() -> e
    boolean isCanceling() -> f
    boolean isCanceled() -> g
    boolean isClosing() -> h
    boolean isClosed() -> i
javax.jmdns.impl.constants.DNSState$1 -> a.a.a.a.h:
    int[] $SwitchMap$javax$jmdns$impl$constants$DNSState -> a
javax.jmdns.impl.constants.DNSState$StateClass -> a.a.a.a.i:
    javax.jmdns.impl.constants.DNSState$StateClass probing -> a
    javax.jmdns.impl.constants.DNSState$StateClass announcing -> b
    javax.jmdns.impl.constants.DNSState$StateClass announced -> c
    javax.jmdns.impl.constants.DNSState$StateClass canceling -> d
    javax.jmdns.impl.constants.DNSState$StateClass canceled -> e
    javax.jmdns.impl.constants.DNSState$StateClass closing -> f
    javax.jmdns.impl.constants.DNSState$StateClass closed -> g
    javax.jmdns.impl.constants.DNSState$StateClass[] $VALUES -> h
    javax.jmdns.impl.constants.DNSState$StateClass[] values() -> values
    javax.jmdns.impl.constants.DNSState$StateClass valueOf(java.lang.String) -> valueOf
javax.jmdns.impl.tasks.DNSTask -> a.a.a.b.a:
    javax.jmdns.impl.JmDNSImpl _jmDNSImpl -> a
    javax.jmdns.impl.JmDNSImpl getDns() -> a
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    javax.jmdns.impl.DNSOutgoing addQuestion(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSQuestion) -> a
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord) -> a
    javax.jmdns.impl.DNSOutgoing addAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord,long) -> a
    javax.jmdns.impl.DNSOutgoing addAuthoritativeAnswer(javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord) -> a
javax.jmdns.impl.tasks.RecordReaper -> a.a.a.b.b:
    java.util.logging.Logger logger -> a
    java.lang.String getName() -> b
    void start(java.util.Timer) -> a
    void run() -> run
javax.jmdns.impl.tasks.Responder -> a.a.a.b.c:
    java.util.logging.Logger logger -> a
    javax.jmdns.impl.DNSIncoming _in -> b
    boolean _unicast -> c
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    void run() -> run
javax.jmdns.impl.tasks.resolver.DNSResolverTask -> a.a.a.b.a.a:
    java.util.logging.Logger logger -> a
    int _count -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    void run() -> run
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> b
    java.lang.String description() -> c
javax.jmdns.impl.tasks.resolver.ServiceInfoResolver -> a.a.a.b.a.b:
    javax.jmdns.impl.ServiceInfoImpl _info -> a
    java.lang.String getName() -> b
    boolean cancel() -> cancel
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> b
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> a
    java.lang.String description() -> c
javax.jmdns.impl.tasks.resolver.ServiceResolver -> a.a.a.b.a.c:
    java.lang.String _type -> a
    java.lang.String getName() -> b
    javax.jmdns.impl.DNSOutgoing addAnswers(javax.jmdns.impl.DNSOutgoing) -> b
    javax.jmdns.impl.DNSOutgoing addQuestions(javax.jmdns.impl.DNSOutgoing) -> a
    java.lang.String description() -> c
javax.jmdns.impl.tasks.state.Announcer -> a.a.a.b.b.a:
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> f
    void advanceTask() -> g
javax.jmdns.impl.tasks.state.Canceler -> a.a.a.b.b.b:
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> f
    void advanceTask() -> g
javax.jmdns.impl.tasks.state.DNSStateTask -> a.a.a.b.b.c:
    int _ttl -> a
    int _defaultTTL -> b
    javax.jmdns.impl.constants.DNSState _taskState -> c
    java.lang.String getTaskDescription() -> c
    int defaultTTL() -> h
    int getTTL() -> i
    void associate(javax.jmdns.impl.constants.DNSState) -> a
    void removeAssociation() -> j
    void run() -> run
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    void advanceObjectsState(java.util.List) -> a
    void recoverTask$786b7c60() -> f
    void advanceTask() -> g
    javax.jmdns.impl.constants.DNSState getTaskState() -> k
    void setTaskState(javax.jmdns.impl.constants.DNSState) -> b
javax.jmdns.impl.tasks.state.Prober -> a.a.a.b.b.d:
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> f
    void advanceTask() -> g
javax.jmdns.impl.tasks.state.Renewer -> a.a.a.b.b.e:
    java.lang.String getName() -> b
    java.lang.String toString() -> toString
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    java.lang.String getTaskDescription() -> c
    boolean checkRunCondition() -> d
    javax.jmdns.impl.DNSOutgoing createOugoing() -> e
    javax.jmdns.impl.DNSOutgoing buildOutgoingForDNS(javax.jmdns.impl.DNSOutgoing) -> a
    javax.jmdns.impl.DNSOutgoing buildOutgoingForInfo(javax.jmdns.impl.ServiceInfoImpl,javax.jmdns.impl.DNSOutgoing) -> a
    void recoverTask$786b7c60() -> f
    void advanceTask() -> g
org.tunesremote.AlbumsActivity -> org.tunesremote.AlbumsActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    org.tunesremote.daap.Session session -> c
    org.tunesremote.daap.Library library -> d
    android.widget.ListView list -> e
    org.tunesremote.AlbumsActivity$AlbumsAdapter adapter -> f
    java.lang.String artist -> g
    android.content.ServiceConnection connection -> j
    android.os.Handler resultsUpdated -> h
    java.util.Map memcache -> i
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.AlbumsActivity$1 -> org.tunesremote.a:
    org.tunesremote.AlbumsActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.AlbumsActivity$1$1 -> org.tunesremote.b:
    org.tunesremote.AlbumsActivity$1 this$1 -> a
    void run() -> run
org.tunesremote.AlbumsActivity$2 -> org.tunesremote.c:
    org.tunesremote.AlbumsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.AlbumsActivity$3 -> org.tunesremote.d:
    org.tunesremote.AlbumsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.AlbumsActivity$4 -> org.tunesremote.e:
    java.lang.String val$albumid -> a
    org.tunesremote.AlbumsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.AlbumsActivity$5 -> org.tunesremote.f:
    java.lang.String val$albumid -> a
    org.tunesremote.AlbumsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.AlbumsActivity$6 -> org.tunesremote.g:
    java.lang.String val$albumid -> a
    org.tunesremote.AlbumsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.AlbumsActivity$AlbumsAdapter -> org.tunesremote.h:
    android.view.LayoutInflater inflater -> b
    java.util.List results -> a
    org.tunesremote.AlbumsActivity this$0 -> c
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.AlbumsActivity$LoadPhotoTask -> org.tunesremote.i:
    org.tunesremote.AlbumsActivity this$0 -> a
    java.lang.Object[] doInBackground(java.lang.Object[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.tunesremote.AlphaView -> org.tunesremote.AlphaView:
    java.lang.String[] alpha -> a
    boolean touching -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onDraw(android.graphics.Canvas) -> onDraw
org.tunesremote.ArtistsActivity -> org.tunesremote.ArtistsActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    org.tunesremote.daap.Session session -> c
    org.tunesremote.daap.Library library -> d
    org.tunesremote.ArtistsActivity$ArtistsAdapter adapter -> e
    android.content.ServiceConnection connection -> g
    android.os.Handler resultsUpdated -> f
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.ArtistsActivity$1 -> org.tunesremote.j:
    org.tunesremote.ArtistsActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.ArtistsActivity$2 -> org.tunesremote.k:
    org.tunesremote.ArtistsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.ArtistsActivity$3 -> org.tunesremote.l:
    org.tunesremote.ArtistsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.ArtistsActivity$4 -> org.tunesremote.m:
    java.lang.String val$artist -> a
    org.tunesremote.ArtistsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ArtistsActivity$5 -> org.tunesremote.n:
    java.lang.String val$artist -> a
    org.tunesremote.ArtistsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ArtistsActivity$6 -> org.tunesremote.o:
    java.lang.String val$artist -> a
    org.tunesremote.ArtistsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ArtistsActivity$ArtistsAdapter -> org.tunesremote.p:
    android.view.LayoutInflater inflater -> b
    java.util.List results -> a
    java.util.List nice -> c
    org.tunesremote.ArtistsActivity this$0 -> d
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.BackendService -> org.tunesremote.BackendService:
    org.tunesremote.daap.Session session -> b
    java.lang.String lastaddress -> c
    android.content.SharedPreferences prefs -> d
    org.tunesremote.util.PairingDatabase pairdb -> a
    android.os.IBinder binder -> e
    org.tunesremote.daap.Session getSession() -> a
    void setLibrary(java.lang.String,java.lang.String,java.lang.String) -> a
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    android.content.SharedPreferences getPrefs() -> b
    void setPrefs(android.content.SharedPreferences) -> a
org.tunesremote.BackendService$BackendBinder -> org.tunesremote.q:
    org.tunesremote.BackendService this$0 -> a
org.tunesremote.BaseBrowseActivity -> org.tunesremote.BaseBrowseActivity:
    android.content.SharedPreferences prefs -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onResume() -> onResume
org.tunesremote.BaseBrowseActivity$1 -> org.tunesremote.r:
    org.tunesremote.BaseBrowseActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.BaseBrowseActivity$2 -> org.tunesremote.s:
    org.tunesremote.BaseBrowseActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.BrowseActivity -> org.tunesremote.BrowseActivity:
    java.lang.String TAG -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    void showWindow(int) -> a
org.tunesremote.ControlActivity -> org.tunesremote.ControlActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    org.tunesremote.daap.Session session -> c
    org.tunesremote.daap.Status status -> d
    java.lang.String showingAlbumId -> e
    android.widget.RatingBar ratingBar -> f
    android.widget.TextView trackName -> g
    android.widget.TextView trackArtist -> h
    android.widget.TextView trackAlbum -> i
    android.widget.TextView seekPosition -> j
    android.widget.TextView seekRemain -> k
    android.widget.SeekBar seekBar -> l
    android.widget.ImageView coverImage -> m
    android.widget.ImageButton controlPrev -> B
    android.widget.ImageButton controlPause -> n
    android.widget.ImageButton controlNext -> C
    android.view.View volume -> D
    android.widget.ProgressBar volumeBar -> E
    android.widget.Toast volumeToast -> F
    org.tunesremote.FadeView fadeview -> o
    android.widget.Toast shuffleToast -> p
    android.widget.Toast repeatToast -> q
    android.view.MenuItem repeat -> G
    android.view.MenuItem shuffle -> H
    android.view.MenuItem speakersMenuItem -> I
    boolean dragging -> r
    boolean agreed -> s
    boolean autoPause -> t
    boolean stayConnected -> J
    boolean fadeDetails -> K
    boolean fadeUpNew -> u
    boolean vibrate -> v
    boolean cropImage -> L
    boolean fullScreen -> M
    boolean ignoreNextTick -> w
    android.os.Vibrator vibrator -> x
    android.content.SharedPreferences prefs -> N
    long cachedTime -> O
    long cachedVolume -> y
    java.util.List speakers -> z
    org.tunesremote.ControlActivity$SpeakersAdapter speakersAdapter -> P
    android.content.ServiceConnection connection -> Q
    android.os.Handler statusUpdate -> A
    android.telephony.PhoneStateListener psListener -> R
    android.os.Handler doubleTapHandler -> S
    void StartNowPlaying() -> a
    void onStart() -> onStart
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onResume() -> onResume
    void onCreate(android.os.Bundle) -> onCreate
    void incrementVolume(long) -> a
    void checkCachedVolume() -> b
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
org.tunesremote.ControlActivity$1 -> org.tunesremote.t:
    org.tunesremote.ControlActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.ControlActivity$10 -> org.tunesremote.u:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$11 -> org.tunesremote.v:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$12 -> org.tunesremote.w:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$13 -> org.tunesremote.x:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$14 -> org.tunesremote.y:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$15 -> org.tunesremote.z:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$16 -> org.tunesremote.aa:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$2 -> org.tunesremote.ab:
    org.tunesremote.ControlActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.ControlActivity$3 -> org.tunesremote.ac:
    boolean wasPlaying -> a
    org.tunesremote.ControlActivity this$0 -> b
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
org.tunesremote.ControlActivity$4 -> org.tunesremote.ad:
    org.tunesremote.ControlActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.ControlActivity$5 -> org.tunesremote.ae:
    org.tunesremote.ControlActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.tunesremote.ControlActivity$6 -> org.tunesremote.af:
    org.tunesremote.ControlActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$7 -> org.tunesremote.ag:
    org.tunesremote.ControlActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$8 -> org.tunesremote.ah:
    org.tunesremote.ControlActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$9 -> org.tunesremote.ai:
    void onRatingChanged(android.widget.RatingBar,float,boolean) -> onRatingChanged
org.tunesremote.ControlActivity$SpeakersAdapter -> org.tunesremote.aj:
    android.view.LayoutInflater inflater -> a
    org.tunesremote.ControlActivity this$0 -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    void setSpeakerActive(boolean,org.tunesremote.daap.Speaker) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.ControlActivity$SpeakersAdapter$1 -> org.tunesremote.ak:
    android.widget.CheckBox val$activeCheckBox -> a
    org.tunesremote.daap.Speaker val$speaker -> b
    org.tunesremote.ControlActivity$SpeakersAdapter this$1 -> c
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$SpeakersAdapter$2 -> org.tunesremote.al:
    android.widget.CheckBox val$activeCheckBox -> a
    org.tunesremote.daap.Speaker val$speaker -> b
    org.tunesremote.ControlActivity$SpeakersAdapter this$1 -> c
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$SpeakersAdapter$3 -> org.tunesremote.am:
    android.widget.CheckBox val$activeCheckBox -> a
    org.tunesremote.daap.Speaker val$speaker -> b
    org.tunesremote.ControlActivity$SpeakersAdapter this$1 -> c
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$VolumeSeekBarListener -> org.tunesremote.an:
    org.tunesremote.daap.Speaker speaker -> a
    org.tunesremote.ControlActivity this$0 -> b
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
org.tunesremote.FadeView -> org.tunesremote.FadeView:
    boolean foundViews -> i
    android.view.View info -> a
    android.view.View seek -> b
    android.view.View rating -> c
    boolean allowFade -> d
    android.os.Handler fadeDownHandler -> e
    android.view.animation.Animation fadeDown -> f
    android.view.animation.Animation fadeUp -> j
    java.util.Timer fadeTimer -> k
    org.tunesremote.FadeView$AnimationState state -> g
    android.os.Handler doubleTapHandler -> h
    long lastDown -> l
    void prepare(android.content.Context) -> a
    void assertViews() -> a
    void onAnimationEnd() -> onAnimationEnd
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void keepAwake() -> b
    void bringIn() -> d
    void startFade() -> c
    void handleEvent(android.view.MotionEvent) -> a
org.tunesremote.FadeView$1 -> org.tunesremote.ao:
    org.tunesremote.FadeView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.FadeView$2 -> org.tunesremote.ap:
    org.tunesremote.FadeView this$0 -> a
    void run() -> run
org.tunesremote.FadeView$AnimationState -> org.tunesremote.aq:
    org.tunesremote.FadeView$AnimationState VISIBLE -> a
    org.tunesremote.FadeView$AnimationState GONE -> b
    org.tunesremote.FadeView$AnimationState FADING_UP -> c
    org.tunesremote.FadeView$AnimationState FADING_DOWN -> d
    org.tunesremote.FadeView$AnimationState[] $VALUES -> e
    org.tunesremote.FadeView$AnimationState[] values() -> values
    org.tunesremote.FadeView$AnimationState valueOf(java.lang.String) -> valueOf
org.tunesremote.FastScrollView -> org.tunesremote.FastScrollView:
    android.graphics.drawable.Drawable mCurrentThumb -> a
    android.graphics.drawable.Drawable mOverlayDrawable -> b
    int mThumbH -> c
    int mThumbW -> d
    int mThumbY -> e
    android.graphics.RectF mOverlayPos -> f
    boolean mDragging -> g
    android.widget.ListView mList -> h
    boolean mScrollCompleted -> i
    boolean mThumbVisible -> j
    int mVisibleItem -> k
    android.graphics.Paint mPaint -> l
    int mListOffset -> m
    java.lang.Object[] mSections -> n
    java.lang.String mSectionText -> o
    boolean mDrawOverlay -> p
    org.tunesremote.FastScrollView$ScrollFade mScrollFade -> q
    android.os.Handler mHandler -> r
    android.widget.BaseAdapter mListAdapter -> s
    boolean mChangedBounds -> t
    void init(android.content.Context) -> a
    void removeThumb() -> a
    void draw(android.graphics.Canvas) -> draw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void getSections() -> b
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    int access$000(org.tunesremote.FastScrollView) -> a
    int access$100(org.tunesremote.FastScrollView) -> b
    int access$200(org.tunesremote.FastScrollView) -> c
org.tunesremote.FastScrollView$ScrollFade -> org.tunesremote.ar:
    long mStartTime -> b
    long mFadeDuration -> c
    boolean mStarted -> a
    org.tunesremote.FastScrollView this$0 -> d
    int getAlpha() -> a
    void run() -> run
org.tunesremote.FastScrollView$SectionIndexer -> org.tunesremote.as:
    java.lang.Object[] getSections() -> a
    int getPositionForSection$134621() -> b
org.tunesremote.LibraryActivity -> org.tunesremote.LibraryActivity:
    java.lang.String TAG -> b
    javax.jmdns.JmDNS zeroConf -> c
    android.net.wifi.WifiManager$MulticastLock mLock -> d
    org.tunesremote.BackendService backend -> e
    android.content.ServiceConnection connection -> f
    android.os.Handler resultsUpdated -> g
    android.widget.ListView list -> h
    org.tunesremote.LibraryActivity$LibraryAdapter adapter -> a
    void startProbe() -> a
    javax.jmdns.JmDNS getZeroConf() -> b
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    void onStart() -> onStart
    void onStop() -> onStop
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    org.tunesremote.BackendService access$002(org.tunesremote.LibraryActivity,org.tunesremote.BackendService) -> a
    org.tunesremote.BackendService access$000(org.tunesremote.LibraryActivity) -> a
org.tunesremote.LibraryActivity$1 -> org.tunesremote.at:
    org.tunesremote.LibraryActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.LibraryActivity$2 -> org.tunesremote.au:
    org.tunesremote.LibraryActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.LibraryActivity$3 -> org.tunesremote.av:
    org.tunesremote.LibraryActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.LibraryActivity$4 -> org.tunesremote.aw:
    org.tunesremote.LibraryActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.LibraryActivity$5 -> org.tunesremote.ax:
    org.tunesremote.LibraryActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.LibraryActivity$5$1 -> org.tunesremote.ay:
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$5$2 -> org.tunesremote.az:
    android.widget.TextView val$address -> a
    android.widget.TextView val$code -> b
    org.tunesremote.LibraryActivity$5 this$1 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$6 -> org.tunesremote.ba:
    org.tunesremote.LibraryActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.LibraryActivity$6$1 -> org.tunesremote.bb:
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$6$2 -> org.tunesremote.bc:
    org.tunesremote.LibraryActivity$6 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$LibraryAdapter -> org.tunesremote.bd:
    android.view.LayoutInflater inflater -> c
    android.view.View footerView -> a
    java.util.LinkedList known -> b
    boolean notifyFound(java.lang.String) -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.NowPlayingActivity -> org.tunesremote.NowPlayingActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    org.tunesremote.daap.Session session -> c
    org.tunesremote.daap.Library library -> d
    org.tunesremote.NowPlayingActivity$NowPlayingAdapter adapter -> e
    android.content.SharedPreferences prefs -> i
    java.lang.String albumid -> f
    boolean iTunes -> g
    android.content.ServiceConnection connection -> j
    android.os.Handler resultsUpdated -> h
    void refreshNowPlaying() -> a
    void clearCurrentCue() -> b
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onResume() -> onResume
org.tunesremote.NowPlayingActivity$1 -> org.tunesremote.be:
    org.tunesremote.NowPlayingActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.NowPlayingActivity$2 -> org.tunesremote.bf:
    org.tunesremote.NowPlayingActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.NowPlayingActivity$3 -> org.tunesremote.bg:
    org.tunesremote.NowPlayingActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.NowPlayingActivity$4 -> org.tunesremote.bh:
    org.tunesremote.NowPlayingActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.NowPlayingActivity$5 -> org.tunesremote.bi:
    org.tunesremote.NowPlayingActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.NowPlayingActivity$NowPlayingAdapter -> org.tunesremote.bj:
    android.view.LayoutInflater inflater -> b
    java.util.List results -> a
    org.tunesremote.NowPlayingActivity this$0 -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
org.tunesremote.PairingActivity -> org.tunesremote.PairingActivity:
    org.tunesremote.daap.PairingServer pairingServer -> a
    javax.jmdns.ServiceInfo pairservice -> b
    java.lang.String address -> c
    java.lang.String library -> d
    android.os.Handler paired -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.String access$000(org.tunesremote.PairingActivity) -> a
    java.lang.String access$100(org.tunesremote.PairingActivity) -> b
    org.tunesremote.daap.PairingServer access$200(org.tunesremote.PairingActivity) -> c
    javax.jmdns.ServiceInfo access$300(org.tunesremote.PairingActivity) -> d
    org.tunesremote.daap.PairingServer access$202$41e024f8(org.tunesremote.PairingActivity) -> e
org.tunesremote.PairingActivity$1 -> org.tunesremote.bk:
    org.tunesremote.PairingActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.PairingActivity$2 -> org.tunesremote.bl:
    org.tunesremote.PairingActivity this$0 -> a
    void run() -> run
org.tunesremote.PairingActivity$3 -> org.tunesremote.bm:
    org.tunesremote.PairingActivity this$0 -> a
    void run() -> run
org.tunesremote.PlaylistListener -> org.tunesremote.bn:
    void foundPlaylist(org.tunesremote.daap.Playlist) -> a
    void searchDone() -> a
org.tunesremote.PlaylistsActivity -> org.tunesremote.PlaylistsActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    org.tunesremote.daap.Session session -> c
    org.tunesremote.daap.Library library -> d
    org.tunesremote.PlaylistsAdapter adapter -> e
    android.content.ServiceConnection connection -> f
    android.os.Handler resultsUpdated -> g
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
org.tunesremote.PlaylistsActivity$1 -> org.tunesremote.bo:
    org.tunesremote.PlaylistsActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.PlaylistsActivity$2 -> org.tunesremote.bp:
    org.tunesremote.PlaylistsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.PlaylistsActivity$3 -> org.tunesremote.bq:
    org.tunesremote.PlaylistsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.PlaylistsActivity$4 -> org.tunesremote.br:
    java.lang.String val$playlistid -> a
    org.tunesremote.daap.Playlist val$ply -> b
    org.tunesremote.PlaylistsActivity this$0 -> c
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.PlaylistsActivity$5 -> org.tunesremote.bs:
    org.tunesremote.daap.Playlist val$ply -> a
    org.tunesremote.PlaylistsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.PlaylistsAdapter -> org.tunesremote.bt:
    android.content.Context context -> b
    android.view.LayoutInflater inflater -> c
    java.util.List results -> a
    android.os.Handler handler -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void foundPlaylist(org.tunesremote.daap.Playlist) -> a
    void searchDone() -> a
    boolean hasStableIds() -> hasStableIds
org.tunesremote.PrefsActivity -> org.tunesremote.PrefsActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.tunesremote.SearchActivity -> org.tunesremote.SearchActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    org.tunesremote.daap.Session session -> c
    org.tunesremote.daap.Library library -> d
    java.lang.String query -> e
    android.content.ServiceConnection connection -> k
    android.os.Handler resultsUpdated -> f
    android.widget.ListView list -> g
    org.tunesremote.SearchActivity$SearchAdapter adapter -> h
    android.graphics.Bitmap blank -> i
    java.util.Map memcache -> j
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.SearchActivity$1 -> org.tunesremote.bu:
    org.tunesremote.SearchActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.SearchActivity$2 -> org.tunesremote.bv:
    org.tunesremote.SearchActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.SearchActivity$3 -> org.tunesremote.bw:
    org.tunesremote.SearchActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.SearchActivity$4 -> org.tunesremote.bx:
    android.widget.AdapterView$AdapterContextMenuInfo val$info -> a
    org.tunesremote.SearchActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.SearchActivity$5 -> org.tunesremote.by:
    java.lang.String val$artistName -> a
    org.tunesremote.SearchActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.SearchActivity$6 -> org.tunesremote.bz:
    java.lang.String val$trackid -> a
    org.tunesremote.SearchActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.SearchActivity$LoadPhotoTask -> org.tunesremote.ca:
    org.tunesremote.SearchActivity this$0 -> a
    java.lang.Object[] doInBackground(java.lang.Object[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
org.tunesremote.SearchActivity$SearchAdapter -> org.tunesremote.cb:
    android.view.LayoutInflater inflater -> h
    org.tunesremote.daap.Library library -> a
    java.lang.String search -> b
    java.util.List results -> i
    long totalResults -> c
    android.view.View footerView -> d
    boolean firstFetch -> j
    boolean fetchRequested -> k
    boolean scrolling -> e
    java.lang.Object scrollWait -> f
    org.tunesremote.SearchActivity this$0 -> g
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    void triggerPage() -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
org.tunesremote.SearchActivity$SearchAdapter$1 -> org.tunesremote.cc:
    org.tunesremote.SearchActivity$SearchAdapter this$1 -> a
    void run() -> run
org.tunesremote.ServerActivity -> org.tunesremote.ServerActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    android.content.ServiceConnection connection -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onStop() -> onStop
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    org.tunesremote.BackendService access$002(org.tunesremote.ServerActivity,org.tunesremote.BackendService) -> a
    org.tunesremote.BackendService access$000(org.tunesremote.ServerActivity) -> a
    java.lang.String access$100() -> a
org.tunesremote.ServerActivity$1 -> org.tunesremote.cd:
    org.tunesremote.ServerActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.ServerActivity$2 -> org.tunesremote.ce:
    org.tunesremote.ServerActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.ServerActivity$3 -> org.tunesremote.cf:
    org.tunesremote.ServerActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ServerActivity$3$1 -> org.tunesremote.cg:
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.ServerActivity$3$2 -> org.tunesremote.ch:
    org.tunesremote.ServerActivity$3 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.TagListener -> org.tunesremote.ci:
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
org.tunesremote.TracksActivity -> org.tunesremote.TracksActivity:
    java.lang.String TAG -> a
    org.tunesremote.BackendService backend -> b
    org.tunesremote.daap.Session session -> c
    org.tunesremote.daap.Library library -> d
    org.tunesremote.TracksActivity$TracksAdapter adapter -> e
    boolean allAlbums -> f
    java.lang.String artist -> g
    java.lang.String albumid -> h
    java.lang.String playlistId -> i
    java.lang.String playlistPersistentId -> j
    android.content.ServiceConnection connection -> l
    android.os.Handler resultsUpdated -> k
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.TracksActivity$1 -> org.tunesremote.cj:
    org.tunesremote.TracksActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.TracksActivity$2 -> org.tunesremote.ck:
    org.tunesremote.TracksActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.TracksActivity$3 -> org.tunesremote.cl:
    org.tunesremote.TracksActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.TracksActivity$4 -> org.tunesremote.cm:
    java.lang.String val$containerItemId -> a
    org.tunesremote.TracksActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$5 -> org.tunesremote.cn:
    java.lang.String val$trackid -> a
    org.tunesremote.TracksActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$6 -> org.tunesremote.co:
    org.tunesremote.TracksActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$7 -> org.tunesremote.cp:
    org.tunesremote.TracksActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$8 -> org.tunesremote.cq:
    android.widget.AdapterView$AdapterContextMenuInfo val$info -> a
    org.tunesremote.TracksActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$9 -> org.tunesremote.cr:
    java.lang.String val$trackid -> a
    org.tunesremote.TracksActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$TracksAdapter -> org.tunesremote.cs:
    android.view.LayoutInflater inflater -> b
    java.util.List results -> a
    org.tunesremote.TracksActivity this$0 -> c
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.WizardActivity -> org.tunesremote.WizardActivity:
    int[] STEPS -> b
    android.widget.ViewFlipper flipper -> a
    android.widget.Button next -> c
    android.widget.Button prev -> d
    void onCreate(android.os.Bundle) -> onCreate
    boolean isFirstDisplayed() -> a
    boolean isLastDisplayed() -> b
    void updateButtons() -> c
org.tunesremote.WizardActivity$1 -> org.tunesremote.ct:
    org.tunesremote.WizardActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.WizardActivity$2 -> org.tunesremote.cu:
    org.tunesremote.WizardActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.daap.Library -> org.tunesremote.a.a:
    java.util.regex.Pattern MLIT_PATTERN -> a
    org.tunesremote.daap.Session session -> b
    long readSearch(org.tunesremote.TagListener,java.lang.String,long,long) -> a
    void readArtists(org.tunesremote.TagListener) -> a
    void readAlbums(org.tunesremote.TagListener,java.lang.String) -> a
    void readTracks(java.lang.String,org.tunesremote.TagListener) -> a
    void readAllTracks(java.lang.String,org.tunesremote.TagListener) -> b
    void readPlaylists(org.tunesremote.PlaylistListener) -> a
    void readPlaylist(java.lang.String,org.tunesremote.TagListener) -> c
    boolean readNowPlaying(java.lang.String,org.tunesremote.TagListener) -> d
    java.lang.String escapeUrlString(java.lang.String) -> a
org.tunesremote.daap.PairingServer -> org.tunesremote.a.b:
    byte[] CHAR_TABLE -> a
    byte[] PAIRING_RAW -> b
    android.os.Handler paired -> c
    java.net.ServerSocket server -> d
    java.util.Random random -> e
    void destroy() -> destroy
    void run() -> run
    java.lang.String toHex(byte[]) -> a
org.tunesremote.daap.Playlist -> org.tunesremote.a.c:
    long ID -> a
    java.lang.String name -> b
    java.lang.String persistentId -> c
    long count -> d
    long getID() -> a
    java.lang.String getName() -> b
    java.lang.String getPersistentId() -> c
    long getCount() -> d
org.tunesremote.daap.RequestHelper -> org.tunesremote.a.d:
    org.tunesremote.daap.Response requestParsed(java.lang.String,boolean) -> a
    void attemptRequest(java.lang.String) -> a
    byte[] request(java.lang.String,boolean) -> b
    android.graphics.Bitmap requestThumbnail(org.tunesremote.daap.Session,int) -> a
    android.graphics.Bitmap requestBitmap(java.lang.String) -> b
org.tunesremote.daap.Response -> org.tunesremote.a.e:
    java.lang.String getString(java.lang.String) -> a
    java.math.BigInteger getNumber(java.lang.String) -> b
    java.util.List findArray(java.lang.String) -> c
    java.lang.String convertTime(long) -> a
org.tunesremote.daap.ResponseParser -> org.tunesremote.a.f:
    java.util.regex.Pattern BRANCHES -> a
    java.util.regex.Pattern STRINGS -> b
    java.util.regex.Pattern RAWS -> c
    int performSearch(byte[],org.tunesremote.TagListener,java.util.regex.Pattern,boolean) -> a
    org.tunesremote.daap.Response performParse(byte[],org.tunesremote.TagListener,java.util.regex.Pattern) -> a
    org.tunesremote.daap.Response performParse(byte[]) -> a
    int search(java.io.DataInputStream,org.tunesremote.TagListener,java.util.regex.Pattern,int,boolean) -> a
    org.tunesremote.daap.Response parse(java.io.DataInputStream,org.tunesremote.TagListener,java.util.regex.Pattern,int) -> a
    java.lang.String readString(java.io.DataInputStream,int) -> a
org.tunesremote.daap.Session -> org.tunesremote.a.g:
    java.lang.String host -> e
    org.tunesremote.daap.Status singleton -> f
    java.lang.String sessionId -> a
    long databaseId -> b
    long radioDatabaseId -> g
    long musicId -> h
    long libraryId -> c
    java.lang.String databasePersistentId -> i
    java.util.List playlists -> d
    org.tunesremote.daap.Status singletonStatus(android.os.Handler) -> a
    java.lang.String getRequestBase() -> a
    void purgeAllStatus() -> b
    void notifyStatus() -> c
    void logout() -> d
    void controlPause() -> e
    void controlPlay() -> f
    void controlNext() -> g
    void controlPrev() -> h
    void controlVolume(long) -> a
    void controlProgress(int) -> a
    void controlShuffle(int) -> b
    void controlRepeat(int) -> c
    void controlRating(long,long) -> a
    void controlClearCue() -> i
    void controlPlayAlbum(java.lang.String,int) -> a
    void controlQueueAlbum(java.lang.String) -> a
    void controlPlayArtist(java.lang.String,int) -> b
    void controlQueueArtist(java.lang.String) -> b
    void controlQueueTrack(java.lang.String) -> c
    void controlPlaySearch(java.lang.String,int) -> c
    void controlPlayPlaylist(java.lang.String,java.lang.String) -> a
    void controlPlayIndex(java.lang.String,int) -> d
org.tunesremote.daap.Session$1 -> org.tunesremote.a.h:
    java.lang.String val$url -> a
    boolean val$notify -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Session$2 -> org.tunesremote.a.i:
    java.lang.String val$albumId -> a
    int val$tracknum -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Session$3 -> org.tunesremote.a.j:
    java.lang.String val$albumId -> a
    org.tunesremote.daap.Session this$0 -> b
    void run() -> run
org.tunesremote.daap.Session$4 -> org.tunesremote.a.k:
    java.lang.String val$encodedArtist -> a
    int val$encodedIndex -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Session$5 -> org.tunesremote.a.l:
    java.lang.String val$encodedArtist -> a
    org.tunesremote.daap.Session this$0 -> b
    void run() -> run
org.tunesremote.daap.Session$6 -> org.tunesremote.a.m:
    java.lang.String val$trackId -> a
    org.tunesremote.daap.Session this$0 -> b
    void run() -> run
org.tunesremote.daap.Session$7 -> org.tunesremote.a.n:
    java.lang.String val$encodedSearch -> a
    int val$index -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Session$8 -> org.tunesremote.a.o:
    java.lang.String val$databasePersistentId -> a
    java.lang.String val$playlistPersistentId -> b
    java.lang.String val$containerItemId -> c
    org.tunesremote.daap.Session this$0 -> d
    void run() -> run
org.tunesremote.daap.Session$9 -> org.tunesremote.a.p:
    int val$tracknum -> a
    java.lang.String val$albumid -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Speaker -> org.tunesremote.a.q:
    long id -> a
    java.lang.String name -> b
    boolean active -> c
    int absoluteVolume -> d
    int getAbsoluteVolume() -> a
    void setAbsoluteVolume(int) -> a
    boolean isActive() -> b
    boolean isLocalSpeaker() -> c
    long getId() -> d
    java.lang.String getIdAsHex() -> e
    void setId(long) -> a
    void setActive(boolean) -> a
    java.lang.String getName() -> f
    void setName(java.lang.String) -> a
    java.lang.String toString() -> toString
org.tunesremote.daap.Status -> org.tunesremote.a.r:
    java.lang.String TAG -> h
    boolean coverEmpty -> a
    android.graphics.Bitmap coverCache -> b
    java.lang.String albumId -> c
    int repeatStatus -> d
    int shuffleStatus -> e
    int playStatus -> f
    boolean visualizer -> i
    boolean fullscreen -> j
    boolean geniusSelectable -> k
    java.util.concurrent.atomic.AtomicBoolean destroyThread -> g
    long rating -> l
    long databaseId -> m
    long playlistId -> n
    long containerItemId -> o
    long trackId -> p
    java.lang.String trackName -> q
    java.lang.String trackArtist -> r
    java.lang.String trackAlbum -> s
    long progressTotal -> t
    long progressRemain -> u
    org.tunesremote.daap.Session session -> v
    android.os.Handler update -> w
    java.util.concurrent.atomic.AtomicInteger failures -> x
    long revision -> y
    java.lang.Thread progress -> z
    java.lang.Thread keepalive -> A
    void updateHandler(android.os.Handler) -> a
    void destroy() -> a
    void fetchUpdate() -> b
    void parseUpdate(org.tunesremote.daap.Response) -> a
    long getVolume() -> c
    java.util.List getSpeakers() -> d
    void setSpeakers(java.util.List) -> a
    void setSpeakerVolume(long,int,int,int,int,long) -> a
    void setAbsoluteVolume(long,int) -> a
    void setRelativeVolume(long,int) -> b
    int getProgress() -> e
    int getRemaining() -> f
    int getProgressTotal() -> g
    int getShuffle() -> h
    int getRepeat() -> i
    int getPlayStatus() -> j
    java.lang.String getTrackName() -> k
    java.lang.String getTrackArtist() -> l
    java.lang.String getTrackAlbum() -> m
    long getRating() -> n
    java.lang.String getAlbumId() -> o
    long getTrackId() -> p
    long access$022(org.tunesremote.daap.Status,long) -> a
    android.os.Handler access$100(org.tunesremote.daap.Status) -> a
    long access$000(org.tunesremote.daap.Status) -> b
    org.tunesremote.daap.Session access$200(org.tunesremote.daap.Status) -> c
    long access$300(org.tunesremote.daap.Status) -> d
    java.util.concurrent.atomic.AtomicInteger access$400(org.tunesremote.daap.Status) -> e
    long access$500(org.tunesremote.daap.Status) -> f
    long access$600(org.tunesremote.daap.Status) -> g
    long access$702(org.tunesremote.daap.Status,long) -> b
org.tunesremote.daap.Status$1 -> org.tunesremote.a.s:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.daap.Status$2 -> org.tunesremote.a.t:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.daap.Status$3 -> org.tunesremote.a.u:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.daap.Status$4 -> org.tunesremote.a.v:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.daap.Status$5 -> org.tunesremote.a.w:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.util.PairingDatabase -> org.tunesremote.util.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    java.lang.String findCode(java.lang.String,java.lang.String) -> a
    java.lang.String findCodeLibrary(java.lang.String) -> a
    java.lang.String findCodeAddress(java.lang.String) -> b
    android.database.Cursor fetchServer(long) -> a
    android.database.Cursor fetchAllServers() -> a
    void deleteAll() -> b
    void insertCode(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean libraryExists(java.lang.String) -> c
    void updateAddressAndCode(java.lang.String,java.lang.String,java.lang.String) -> b
org.tunesremote.util.RecentProvider -> org.tunesremote.util.RecentProvider:
org.tunesremote.util.ThreadExecutor -> org.tunesremote.util.b:
    java.util.concurrent.BlockingQueue sWorkQueue -> a
    java.util.concurrent.ThreadFactory sThreadFactory -> b
    java.util.concurrent.ThreadPoolExecutor sExecutor -> c
    void runTask(java.lang.Runnable) -> a
org.tunesremote.util.ThreadExecutor$1 -> org.tunesremote.util.c:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
