javax.jmdns.JmDNS -> a.a.a:
    javax.jmdns.JmDNS create(java.net.InetAddress,java.lang.String) -> a
    javax.jmdns.ServiceInfo getServiceInfo(java.lang.String,java.lang.String) -> a
    void requestServiceInfo$3b99ba1a(java.lang.String,java.lang.String) -> b
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> a
    void removeServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> b
    void registerService(javax.jmdns.ServiceInfo) -> a
    void unregisterService(javax.jmdns.ServiceInfo) -> b
    void close() -> a
javax.jmdns.ServiceEvent -> a.a.b:
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    javax.jmdns.ServiceInfo getInfo() -> d
javax.jmdns.ServiceInfo -> a.a.c:
    byte[] NO_VALUE -> a
    javax.jmdns.ServiceInfo create$281b1b97(java.lang.String,java.lang.String,java.util.Hashtable) -> a
    java.lang.String getServer() -> a
    java.lang.String getHostAddress() -> b
    int getPort() -> c
    java.lang.String getPropertyString(java.lang.String) -> a
javax.jmdns.ServiceListener -> a.a.d:
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
javax.jmdns.impl.DNSCache -> a.a.a.a:
    int size -> a
    java.util.HashMap hashtable -> b
    void clear() -> a
    void add(javax.jmdns.impl.DNSEntry) -> a
    boolean remove(javax.jmdns.impl.DNSEntry) -> b
    javax.jmdns.impl.DNSEntry get(javax.jmdns.impl.DNSEntry) -> c
    javax.jmdns.impl.DNSEntry get$19c1779a(java.lang.String,int) -> a
    java.util.Iterator iterator() -> b
    javax.jmdns.impl.DNSCache$CacheNode find(java.lang.String) -> a
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSCache$CacheNode -> a.a.a.b:
    javax.jmdns.impl.DNSEntry value -> a
    javax.jmdns.impl.DNSCache$CacheNode next -> b
    javax.jmdns.impl.DNSCache$CacheNode next() -> a
    javax.jmdns.impl.DNSEntry getValue() -> b
    javax.jmdns.impl.DNSCache$CacheNode access$002(javax.jmdns.impl.DNSCache$CacheNode,javax.jmdns.impl.DNSCache$CacheNode) -> a
    javax.jmdns.impl.DNSCache$CacheNode access$000(javax.jmdns.impl.DNSCache$CacheNode) -> a
    javax.jmdns.impl.DNSEntry access$100(javax.jmdns.impl.DNSCache$CacheNode) -> b
javax.jmdns.impl.DNSEntry -> a.a.a.c:
    java.lang.String name -> a
    int type -> b
    int clazz -> c
    boolean unique -> d
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> a
    int getType() -> b
    int hashCode() -> hashCode
    java.lang.String toString(java.lang.String,java.lang.String) -> a
javax.jmdns.impl.DNSIncoming -> a.a.a.d:
    boolean USE_DOMAIN_NAME_FORMAT_FOR_SRV_TARGET -> a
    java.net.DatagramPacket packet -> e
    int off -> f
    int len -> g
    byte[] data -> h
    int id -> b
    int flags -> i
    int numQuestions -> j
    int numAnswers -> c
    int numAuthorities -> k
    int numAdditionals -> l
    long receivedTime -> m
    java.util.List questions -> n
    java.util.List answers -> d
    boolean isQuery() -> a
    boolean isTruncated() -> b
    int get(int) -> a
    int readUnsignedShort() -> f
    byte[] readBytes(int,int) -> a
    void readUTF(java.lang.StringBuffer,int,int) -> a
    java.lang.String readName() -> g
    java.lang.String toString() -> toString
    void append(javax.jmdns.impl.DNSIncoming) -> a
    int elapseSinceArrival() -> c
    java.util.List getQuestions() -> d
    java.util.List getAnswers() -> e
javax.jmdns.impl.DNSListener -> a.a.a.e:
    void updateRecord(javax.jmdns.impl.JmDNSImpl,long,javax.jmdns.impl.DNSRecord) -> a
javax.jmdns.impl.DNSOutgoing -> a.a.a.f:
    boolean USE_DOMAIN_NAME_COMPRESSION -> e
    int id -> a
    int flags -> b
    boolean multicast -> f
    int numQuestions -> g
    int numAnswers -> h
    int numAuthorities -> i
    java.util.Hashtable names -> j
    byte[] data -> c
    int off -> d
    java.util.LinkedList authorativeAnswers -> k
    void addQuestion(javax.jmdns.impl.DNSQuestion) -> a
    void addAnswer(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSRecord) -> a
    void addAnswer(javax.jmdns.impl.DNSRecord,long) -> a
    void addAuthorativeAnswer(javax.jmdns.impl.DNSRecord) -> a
    void writeByte(int) -> a
    void writeBytes$1cf967a4(byte[],int) -> a
    void writeShort(int) -> b
    void writeUTF$44bd8e9f(java.lang.String,int) -> a
    void writeName(java.lang.String) -> a
    void writeName(java.lang.String,boolean) -> a
    void writeRecord(javax.jmdns.impl.DNSRecord,long) -> b
    void finish() -> a
    boolean isEmpty() -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSQuestion -> a.a.a.g:
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSRecord -> a.a.a.h:
    int ttl -> e
    long created -> f
    java.net.InetAddress source -> g
    boolean equals(java.lang.Object) -> equals
    boolean sameAs(javax.jmdns.impl.DNSRecord) -> d
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean sameType(javax.jmdns.impl.DNSRecord) -> b
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    boolean suppressedBy(javax.jmdns.impl.DNSIncoming) -> a
    long getExpirationTime$134622() -> e
    int getRemainingTTL(long) -> a
    boolean isExpired(long) -> b
    void resetTTL(javax.jmdns.impl.DNSRecord) -> c
    void write(javax.jmdns.impl.DNSOutgoing) -> a
    void setRecordSource(java.net.InetAddress) -> a
    java.net.InetAddress getRecordSource() -> c
    java.lang.String toString(java.lang.String) -> a
    int getTtl() -> d
javax.jmdns.impl.DNSRecord$Address -> a.a.a.i:
    java.net.InetAddress addr -> e
    void write(javax.jmdns.impl.DNSOutgoing) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    byte[] toByteArray() -> e
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSRecord$Pointer -> a.a.a.j:
    java.lang.String alias -> e
    void write(javax.jmdns.impl.DNSOutgoing) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSRecord$Service -> a.a.a.k:
    int priority -> e
    int weight -> f
    int port -> g
    java.lang.String server -> h
    void write(javax.jmdns.impl.DNSOutgoing) -> a
    byte[] toByteArray() -> e
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSRecord$Text -> a.a.a.l:
    byte[] text -> e
    void write(javax.jmdns.impl.DNSOutgoing) -> a
    boolean sameValue(javax.jmdns.impl.DNSRecord) -> a
    boolean handleQuery$346d037d(javax.jmdns.impl.JmDNSImpl) -> a
    boolean handleResponse(javax.jmdns.impl.JmDNSImpl) -> b
    java.lang.String toString() -> toString
javax.jmdns.impl.DNSState -> a.a.a.m:
    java.lang.String name -> e
    int nextOrdinal -> f
    int ordinal -> g
    java.util.ArrayList sequence -> h
    javax.jmdns.impl.DNSState PROBING_1 -> a
    javax.jmdns.impl.DNSState PROBING_3 -> i
    javax.jmdns.impl.DNSState ANNOUNCING_1 -> b
    javax.jmdns.impl.DNSState ANNOUNCING_2 -> j
    javax.jmdns.impl.DNSState ANNOUNCED -> c
    javax.jmdns.impl.DNSState CANCELED -> d
    java.lang.String toString() -> toString
    javax.jmdns.impl.DNSState advance() -> a
    javax.jmdns.impl.DNSState revert() -> b
    boolean isProbing() -> c
    boolean isAnnouncing() -> d
    boolean isAnnounced() -> e
    int compareTo(java.lang.Object) -> compareTo
javax.jmdns.impl.HostInfo -> a.a.a.n:
    java.lang.String name -> a
    java.net.InetAddress address -> b
    java.net.NetworkInterface interfaze -> c
    int hostNameCount -> d
    java.lang.String getName() -> a
    java.net.InetAddress getAddress() -> b
    java.lang.String incrementHostName() -> c
    boolean shouldIgnorePacket(java.net.DatagramPacket) -> a
    javax.jmdns.impl.DNSRecord$Address getDNSAddressRecord(javax.jmdns.impl.DNSRecord$Address) -> a
    javax.jmdns.impl.DNSRecord$Address getDNS4AddressRecord() -> d
    javax.jmdns.impl.DNSRecord$Address getDNS6AddressRecord() -> e
    java.lang.String toString() -> toString
    void addAddressRecords(javax.jmdns.impl.DNSOutgoing,boolean) -> a
javax.jmdns.impl.JmDNSImpl -> a.a.a.o:
    java.net.InetAddress group -> a
    java.net.MulticastSocket socket -> b
    boolean closed -> c
    java.util.List listeners -> d
    java.util.Map serviceListeners -> e
    java.util.List typeListeners -> f
    javax.jmdns.impl.DNSCache cache -> g
    java.util.Map services -> h
    java.util.Map serviceTypes -> i
    java.lang.Thread shutdown -> j
    javax.jmdns.impl.HostInfo localHost -> k
    java.lang.Thread incomingListener -> l
    int throttle -> m
    long lastThrottleIncrement -> n
    java.util.Timer timer -> o
    java.util.Random random -> p
    java.lang.Object ioLock -> q
    javax.jmdns.impl.DNSIncoming plannedAnswer -> r
    javax.jmdns.impl.DNSState state -> s
    java.util.TimerTask task -> t
    java.util.HashMap serviceCollectors -> u
    void init(java.net.InetAddress,java.lang.String) -> b
    void start(java.util.Collection) -> a
    void openMulticastSocket$76364ba9() -> w
    void closeMulticastSocket() -> x
    void advanceState() -> b
    void revertState() -> c
    javax.jmdns.impl.DNSState getState() -> d
    javax.jmdns.impl.DNSCache getCache() -> e
    javax.jmdns.impl.HostInfo getLocalHost() -> f
    java.net.InetAddress getInterface() -> g
    javax.jmdns.ServiceInfo getServiceInfo(java.lang.String,java.lang.String) -> a
    javax.jmdns.ServiceInfo getServiceInfo$374344a(java.lang.String,java.lang.String) -> c
    void requestServiceInfo$3b99ba1a(java.lang.String,java.lang.String) -> b
    void handleServiceResolved(javax.jmdns.impl.ServiceInfoImpl) -> a
    void addServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> a
    void removeServiceListener(java.lang.String,javax.jmdns.ServiceListener) -> b
    void registerService(javax.jmdns.ServiceInfo) -> a
    void unregisterService(javax.jmdns.ServiceInfo) -> b
    void unregisterAllServices() -> y
    void registerServiceType(java.lang.String) -> b
    java.lang.String incrementName(java.lang.String) -> a
    void addListener(javax.jmdns.impl.DNSListener,javax.jmdns.impl.DNSQuestion) -> a
    void removeListener(javax.jmdns.impl.DNSListener) -> a
    void updateRecord(long,javax.jmdns.impl.DNSRecord) -> a
    void handleResponse(javax.jmdns.impl.DNSIncoming) -> a
    void handleQuery(javax.jmdns.impl.DNSIncoming,java.net.InetAddress,int) -> a
    javax.jmdns.impl.DNSOutgoing addAnswer$36e089f(javax.jmdns.impl.DNSIncoming,javax.jmdns.impl.DNSOutgoing,javax.jmdns.impl.DNSRecord) -> a
    void send(javax.jmdns.impl.DNSOutgoing) -> a
    void startAnnouncer() -> h
    void startRenewer() -> i
    void schedule(java.util.TimerTask,int) -> a
    void recover() -> j
    void close() -> a
    java.lang.String toString() -> toString
    void disposeServiceCollectors() -> z
    java.lang.String toUnqualifiedName(java.lang.String,java.lang.String) -> d
    void setTask(java.util.TimerTask) -> a
    java.util.TimerTask getTask() -> k
    java.util.Map getServices() -> l
    void setLastThrottleIncrement(long) -> a
    long getLastThrottleIncrement() -> m
    void setThrottle(int) -> a
    int getThrottle() -> n
    java.util.Random getRandom() -> o
    java.lang.Object getIoLock() -> p
    void setPlannedAnswer$476c767e() -> q
    javax.jmdns.impl.DNSIncoming getPlannedAnswer() -> r
    java.util.Map getServiceTypes() -> s
    void setClosed$1385ff() -> t
    java.net.MulticastSocket getSocket() -> u
    java.net.InetAddress getGroup() -> v
    java.lang.Thread access$102$586a7fd5(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.JmDNSImpl$ServiceCollector -> a.a.a.p:
    java.util.Map infos -> a
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    java.lang.String toString() -> toString
javax.jmdns.impl.JmDNSImpl$Shutdown -> a.a.a.q:
    javax.jmdns.impl.JmDNSImpl this$0 -> a
    void run() -> run
javax.jmdns.impl.ServiceEventImpl -> a.a.a.r:
    java.lang.String type -> a
    java.lang.String name -> b
    javax.jmdns.impl.ServiceInfoImpl info -> c
    javax.jmdns.JmDNS getDNS() -> a
    java.lang.String getType() -> b
    java.lang.String getName() -> c
    java.lang.String toString() -> toString
    javax.jmdns.ServiceInfo getInfo() -> d
javax.jmdns.impl.ServiceInfoImpl -> a.a.a.s:
    javax.jmdns.impl.JmDNSImpl dns -> h
    javax.jmdns.impl.DNSState state -> i
    java.util.TimerTask task -> j
    java.lang.String type -> b
    java.lang.String name -> k
    java.lang.String server -> c
    int port -> d
    int weight -> e
    int priority -> f
    byte[] text -> l
    java.util.Hashtable props -> m
    java.net.InetAddress addr -> g
    java.lang.String getType() -> d
    java.lang.String getName() -> e
    void setName(java.lang.String) -> b
    java.lang.String getQualifiedName() -> f
    java.lang.String getServer() -> a
    java.lang.String getHostAddress() -> b
    int getPort() -> c
    int getPriority() -> g
    int getWeight() -> h
    java.lang.String getPropertyString(java.lang.String) -> a
    void writeUTF(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readUTF(byte[],int,int) -> a
    java.util.Hashtable getProperties() -> p
    void updateRecord(javax.jmdns.impl.JmDNSImpl,long,javax.jmdns.impl.DNSRecord) -> a
    boolean hasData() -> i
    void advanceState() -> j
    void revertState() -> k
    void cancel() -> l
    javax.jmdns.impl.DNSState getState() -> m
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String getNiceTextString() -> q
    java.lang.String toString() -> toString
    void addAnswers(javax.jmdns.impl.DNSOutgoing,int,javax.jmdns.impl.HostInfo) -> a
    void setTask(java.util.TimerTask) -> a
    java.util.TimerTask getTask() -> n
    byte[] getText() -> o
    void setDns(javax.jmdns.impl.JmDNSImpl) -> a
javax.jmdns.impl.SocketListener -> a.a.a.t:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    void run() -> run
javax.jmdns.impl.tasks.Announcer -> a.a.a.a.a:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    javax.jmdns.impl.DNSState taskState -> b
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    void run() -> run
javax.jmdns.impl.tasks.Canceler -> a.a.a.a.b:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    int count -> b
    javax.jmdns.impl.ServiceInfoImpl[] infos -> c
    java.lang.Object lock -> d
    void run() -> run
javax.jmdns.impl.tasks.Prober -> a.a.a.a.c:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    javax.jmdns.impl.DNSState taskState -> b
    void start(java.util.Timer) -> a
    boolean cancel() -> cancel
    void run() -> run
javax.jmdns.impl.tasks.RecordReaper -> a.a.a.a.d:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    void run() -> run
javax.jmdns.impl.tasks.Renewer -> a.a.a.a.e:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    javax.jmdns.impl.DNSState taskState -> b
    boolean cancel() -> cancel
    void run() -> run
javax.jmdns.impl.tasks.Responder -> a.a.a.a.f:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    javax.jmdns.impl.DNSIncoming in -> b
    int port -> c
    void start() -> a
    void run() -> run
javax.jmdns.impl.tasks.ServiceInfoResolver -> a.a.a.a.g:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    int count -> b
    javax.jmdns.impl.ServiceInfoImpl info -> c
    void run() -> run
javax.jmdns.impl.tasks.ServiceResolver -> a.a.a.a.h:
    javax.jmdns.impl.JmDNSImpl jmDNSImpl -> a
    int count -> b
    java.lang.String type -> c
    void run() -> run
org.tunesremote.AlbumsActivity -> org.tunesremote.AlbumsActivity:
    org.tunesremote.BackendService backend -> a
    org.tunesremote.daap.Session session -> b
    org.tunesremote.daap.Library library -> c
    android.widget.ListView list -> d
    org.tunesremote.AlbumsActivity$AlbumsAdapter adapter -> e
    java.lang.String artist -> f
    android.content.ServiceConnection connection -> i
    android.os.Handler resultsUpdated -> g
    java.util.Map memcache -> h
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.AlbumsActivity$1 -> org.tunesremote.a:
    org.tunesremote.AlbumsActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.AlbumsActivity$1$1 -> org.tunesremote.b:
    org.tunesremote.AlbumsActivity$1 this$1 -> a
    void run() -> run
org.tunesremote.AlbumsActivity$2 -> org.tunesremote.c:
    org.tunesremote.AlbumsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.AlbumsActivity$3 -> org.tunesremote.d:
    org.tunesremote.AlbumsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.AlbumsActivity$4 -> org.tunesremote.e:
    java.lang.String val$albumid -> a
    org.tunesremote.AlbumsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.AlbumsActivity$5 -> org.tunesremote.f:
    java.lang.String val$albumid -> a
    org.tunesremote.AlbumsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.AlbumsActivity$6 -> org.tunesremote.g:
    java.lang.String val$albumid -> a
    org.tunesremote.AlbumsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.AlbumsActivity$AlbumsAdapter -> org.tunesremote.h:
    android.view.LayoutInflater inflater -> b
    java.util.List results -> a
    org.tunesremote.AlbumsActivity this$0 -> c
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.AlbumsActivity$LoadPhotoTask -> org.tunesremote.i:
    org.tunesremote.AlbumsActivity this$0 -> a
    java.lang.Object[] doInBackground(java.lang.Object[]) -> c
    void end(java.lang.Object) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> a
org.tunesremote.AlphaView -> org.tunesremote.AlphaView:
    java.lang.String[] alpha -> a
    boolean touching -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onDraw(android.graphics.Canvas) -> onDraw
org.tunesremote.ArtistsActivity -> org.tunesremote.ArtistsActivity:
    org.tunesremote.BackendService backend -> a
    org.tunesremote.daap.Session session -> b
    org.tunesremote.daap.Library library -> c
    org.tunesremote.ArtistsActivity$ArtistsAdapter adapter -> d
    android.content.ServiceConnection connection -> f
    android.os.Handler resultsUpdated -> e
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.ArtistsActivity$1 -> org.tunesremote.j:
    org.tunesremote.ArtistsActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.ArtistsActivity$2 -> org.tunesremote.k:
    org.tunesremote.ArtistsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.ArtistsActivity$3 -> org.tunesremote.l:
    org.tunesremote.ArtistsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.ArtistsActivity$4 -> org.tunesremote.m:
    java.lang.String val$artist -> a
    org.tunesremote.ArtistsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ArtistsActivity$5 -> org.tunesremote.n:
    java.lang.String val$artist -> a
    org.tunesremote.ArtistsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ArtistsActivity$6 -> org.tunesremote.o:
    java.lang.String val$artist -> a
    org.tunesremote.ArtistsActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ArtistsActivity$ArtistsAdapter -> org.tunesremote.p:
    android.view.LayoutInflater inflater -> b
    java.util.List results -> a
    java.util.List nice -> c
    org.tunesremote.ArtistsActivity this$0 -> d
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.BackendService -> org.tunesremote.BackendService:
    org.tunesremote.daap.Session session -> b
    java.lang.String lastaddress -> c
    android.content.SharedPreferences prefs -> d
    org.tunesremote.util.PairingDatabase pairdb -> a
    android.os.IBinder binder -> e
    org.tunesremote.daap.Session getSession() -> a
    void setLibrary(java.lang.String,java.lang.String,java.lang.String) -> a
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    android.content.SharedPreferences getPrefs() -> b
    void setPrefs(android.content.SharedPreferences) -> a
org.tunesremote.BackendService$BackendBinder -> org.tunesremote.q:
    org.tunesremote.BackendService this$0 -> a
org.tunesremote.BaseBrowseActivity -> org.tunesremote.BaseBrowseActivity:
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
org.tunesremote.BaseBrowseActivity$1 -> org.tunesremote.r:
    org.tunesremote.BaseBrowseActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.BaseBrowseActivity$2 -> org.tunesremote.s:
    org.tunesremote.BaseBrowseActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.BrowseActivity -> org.tunesremote.BrowseActivity:
    java.lang.String TAG -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    void showWindow(int) -> a
org.tunesremote.ControlActivity -> org.tunesremote.ControlActivity:
    java.lang.String TAG -> u
    org.tunesremote.BackendService backend -> a
    org.tunesremote.daap.Session session -> b
    org.tunesremote.daap.Status status -> c
    boolean dragging -> d
    java.lang.String showingAlbumId -> e
    android.content.ServiceConnection connection -> v
    android.os.Handler statusUpdate -> f
    android.os.Handler doubleTapHandler -> w
    android.widget.TextView trackName -> g
    android.widget.TextView trackArtist -> h
    android.widget.TextView trackAlbum -> i
    android.widget.TextView seekPosition -> j
    android.widget.TextView seekRemain -> k
    android.widget.SeekBar seekBar -> l
    android.widget.ImageSwitcher cover -> m
    android.widget.ImageButton controlPrev -> x
    android.widget.ImageButton controlPause -> n
    android.widget.ImageButton controlNext -> y
    java.text.SimpleDateFormat format -> z
    java.util.Date date -> A
    android.view.View volume -> B
    android.widget.ProgressBar volumeBar -> C
    android.widget.Toast volumeToast -> D
    org.tunesremote.FadeView fadeview -> o
    boolean stayConnected -> E
    boolean fadeDetails -> F
    boolean fadeUpNew -> p
    boolean vibrate -> q
    android.os.Vibrator vibrator -> r
    android.content.SharedPreferences prefs -> G
    boolean agreed -> s
    boolean ignoreNextTick -> t
    long cachedTime -> H
    long cachedVolume -> I
    android.view.MenuItem repeat -> J
    android.view.MenuItem shuffle -> K
    java.lang.String formatTime(int) -> a
    android.view.View makeView() -> makeView
    void onStart() -> onStart
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    void incrementVolume(long) -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
org.tunesremote.ControlActivity$1 -> org.tunesremote.t:
    org.tunesremote.ControlActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.ControlActivity$10 -> org.tunesremote.u:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$11 -> org.tunesremote.v:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$2 -> org.tunesremote.w:
    org.tunesremote.ControlActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.ControlActivity$3 -> org.tunesremote.x:
    org.tunesremote.ControlActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.ControlActivity$4 -> org.tunesremote.y:
    org.tunesremote.ControlActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.tunesremote.ControlActivity$5 -> org.tunesremote.z:
    org.tunesremote.ControlActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$6 -> org.tunesremote.aa:
    org.tunesremote.ControlActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$7 -> org.tunesremote.ab:
    org.tunesremote.ControlActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.ControlActivity$8 -> org.tunesremote.ac:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.ControlActivity$9 -> org.tunesremote.ad:
    org.tunesremote.ControlActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.FadeView -> org.tunesremote.FadeView:
    boolean foundViews -> h
    android.view.View info -> a
    android.view.View seek -> b
    boolean allowFade -> c
    android.os.Handler fadeDownHandler -> d
    android.view.animation.Animation fadeDown -> e
    android.view.animation.Animation fadeUp -> i
    java.util.Timer fadeTimer -> j
    org.tunesremote.FadeView$AnimationState state -> f
    android.os.Handler doubleTapHandler -> g
    long lastDown -> k
    void prepare(android.content.Context) -> a
    void assertViews() -> a
    void onAnimationEnd() -> onAnimationEnd
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void keepAwake() -> b
    void bringIn() -> d
    void startFade() -> c
    void handleEvent(android.view.MotionEvent) -> a
org.tunesremote.FadeView$1 -> org.tunesremote.ae:
    org.tunesremote.FadeView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.FadeView$2 -> org.tunesremote.af:
    org.tunesremote.FadeView this$0 -> a
    void run() -> run
org.tunesremote.FadeView$AnimationState -> org.tunesremote.ag:
    org.tunesremote.FadeView$AnimationState VISIBLE -> a
    org.tunesremote.FadeView$AnimationState GONE -> b
    org.tunesremote.FadeView$AnimationState FADING_UP -> c
    org.tunesremote.FadeView$AnimationState FADING_DOWN -> d
    org.tunesremote.FadeView$AnimationState[] $VALUES -> e
    org.tunesremote.FadeView$AnimationState[] values() -> values
    org.tunesremote.FadeView$AnimationState valueOf(java.lang.String) -> valueOf
org.tunesremote.FastScrollView -> org.tunesremote.FastScrollView:
    android.graphics.drawable.Drawable mCurrentThumb -> a
    android.graphics.drawable.Drawable mOverlayDrawable -> b
    int mThumbH -> c
    int mThumbW -> d
    int mThumbY -> e
    android.graphics.RectF mOverlayPos -> f
    boolean mDragging -> g
    android.widget.ListView mList -> h
    boolean mScrollCompleted -> i
    boolean mThumbVisible -> j
    int mVisibleItem -> k
    android.graphics.Paint mPaint -> l
    int mListOffset -> m
    java.lang.Object[] mSections -> n
    java.lang.String mSectionText -> o
    boolean mDrawOverlay -> p
    org.tunesremote.FastScrollView$ScrollFade mScrollFade -> q
    android.os.Handler mHandler -> r
    android.widget.BaseAdapter mListAdapter -> s
    boolean mChangedBounds -> t
    void init(android.content.Context) -> a
    void removeThumb() -> a
    void draw(android.graphics.Canvas) -> draw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void getSections() -> b
    void onChildViewAdded(android.view.View,android.view.View) -> onChildViewAdded
    void onChildViewRemoved(android.view.View,android.view.View) -> onChildViewRemoved
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    int access$000(org.tunesremote.FastScrollView) -> a
    int access$100(org.tunesremote.FastScrollView) -> b
    int access$200(org.tunesremote.FastScrollView) -> c
org.tunesremote.FastScrollView$ScrollFade -> org.tunesremote.ah:
    long mStartTime -> b
    long mFadeDuration -> c
    boolean mStarted -> a
    org.tunesremote.FastScrollView this$0 -> d
    int getAlpha() -> a
    void run() -> run
org.tunesremote.FastScrollView$SectionIndexer -> org.tunesremote.ai:
    java.lang.Object[] getSections() -> a
    int getPositionForSection$134621() -> b
org.tunesremote.LibraryActivity -> org.tunesremote.LibraryActivity:
    java.lang.String TAG -> b
    javax.jmdns.JmDNS zeroConf -> c
    android.net.wifi.WifiManager$MulticastLock mLock -> d
    org.tunesremote.BackendService backend -> e
    android.content.ServiceConnection connection -> f
    android.os.Handler resultsUpdated -> g
    android.widget.ListView list -> h
    org.tunesremote.LibraryActivity$LibraryAdapter adapter -> a
    void startProbe() -> a
    javax.jmdns.JmDNS getZeroConf() -> b
    void serviceAdded(javax.jmdns.ServiceEvent) -> a
    void serviceRemoved(javax.jmdns.ServiceEvent) -> b
    void serviceResolved(javax.jmdns.ServiceEvent) -> c
    void onStart() -> onStart
    void onStop() -> onStop
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    org.tunesremote.BackendService access$002(org.tunesremote.LibraryActivity,org.tunesremote.BackendService) -> a
    org.tunesremote.BackendService access$000(org.tunesremote.LibraryActivity) -> a
org.tunesremote.LibraryActivity$1 -> org.tunesremote.aj:
    org.tunesremote.LibraryActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.LibraryActivity$2 -> org.tunesremote.ak:
    org.tunesremote.LibraryActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.LibraryActivity$3 -> org.tunesremote.al:
    org.tunesremote.LibraryActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.LibraryActivity$4 -> org.tunesremote.am:
    org.tunesremote.LibraryActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.LibraryActivity$5 -> org.tunesremote.an:
    org.tunesremote.LibraryActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.LibraryActivity$5$1 -> org.tunesremote.ao:
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$5$2 -> org.tunesremote.ap:
    android.widget.TextView val$address -> a
    android.widget.TextView val$code -> b
    org.tunesremote.LibraryActivity$5 this$1 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$6 -> org.tunesremote.aq:
    org.tunesremote.LibraryActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.LibraryActivity$6$1 -> org.tunesremote.ar:
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$6$2 -> org.tunesremote.as:
    org.tunesremote.LibraryActivity$6 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.tunesremote.LibraryActivity$LibraryAdapter -> org.tunesremote.at:
    android.view.LayoutInflater inflater -> c
    android.view.View footerView -> a
    java.util.List known -> b
    void notifyFound(java.lang.String) -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.NowPlayingActivity -> org.tunesremote.NowPlayingActivity:
    org.tunesremote.BackendService backend -> a
    org.tunesremote.daap.Session session -> b
    org.tunesremote.daap.Library library -> c
    org.tunesremote.NowPlayingActivity$NowPlayingAdapter adapter -> d
    java.lang.String albumid -> e
    android.content.ServiceConnection connection -> g
    android.os.Handler resultsUpdated -> f
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
org.tunesremote.NowPlayingActivity$1 -> org.tunesremote.au:
    org.tunesremote.NowPlayingActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.NowPlayingActivity$2 -> org.tunesremote.av:
    org.tunesremote.NowPlayingActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.NowPlayingActivity$3 -> org.tunesremote.aw:
    org.tunesremote.NowPlayingActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.NowPlayingActivity$NowPlayingAdapter -> org.tunesremote.ax:
    android.view.LayoutInflater inflater -> b
    java.text.SimpleDateFormat format -> c
    java.util.Date date -> d
    java.util.List results -> a
    org.tunesremote.NowPlayingActivity this$0 -> e
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
org.tunesremote.PairingActivity -> org.tunesremote.PairingActivity:
    org.tunesremote.daap.PairingServer pairingServer -> a
    javax.jmdns.ServiceInfo pairservice -> b
    java.lang.String address -> c
    java.lang.String library -> d
    android.os.Handler paired -> e
    char[] _nibbleToHex -> f
    void onCreate(android.os.Bundle) -> onCreate
    java.lang.String toHex(byte[]) -> a
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.String access$000(org.tunesremote.PairingActivity) -> a
    java.lang.String access$100(org.tunesremote.PairingActivity) -> b
    org.tunesremote.daap.PairingServer access$200(org.tunesremote.PairingActivity) -> c
    javax.jmdns.ServiceInfo access$300(org.tunesremote.PairingActivity) -> d
    org.tunesremote.daap.PairingServer access$202$41e024f8(org.tunesremote.PairingActivity) -> e
org.tunesremote.PairingActivity$1 -> org.tunesremote.ay:
    org.tunesremote.PairingActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.PairingActivity$2 -> org.tunesremote.az:
    org.tunesremote.PairingActivity this$0 -> a
    void run() -> run
org.tunesremote.PairingActivity$3 -> org.tunesremote.ba:
    org.tunesremote.PairingActivity this$0 -> a
    void run() -> run
org.tunesremote.PlaylistsActivity -> org.tunesremote.PlaylistsActivity:
    org.tunesremote.BackendService backend -> a
    org.tunesremote.daap.Session session -> b
    org.tunesremote.daap.Library library -> c
    org.tunesremote.PlaylistsAdapter adapter -> d
    android.content.ServiceConnection connection -> e
    android.os.Handler resultsUpdated -> f
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
org.tunesremote.PlaylistsActivity$1 -> org.tunesremote.bb:
    org.tunesremote.PlaylistsActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.PlaylistsActivity$2 -> org.tunesremote.bc:
    org.tunesremote.PlaylistsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.PlaylistsActivity$3 -> org.tunesremote.bd:
    org.tunesremote.PlaylistsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.PlaylistsActivity$4 -> org.tunesremote.be:
    java.lang.String val$playlistid -> a
    org.tunesremote.daap.Playlist val$ply -> b
    org.tunesremote.PlaylistsActivity this$0 -> c
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.PlaylistsAdapter -> org.tunesremote.bf:
    android.content.Context context -> b
    android.view.LayoutInflater inflater -> c
    java.util.List results -> a
    android.os.Handler handler -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void foundPlaylist(org.tunesremote.daap.Playlist) -> a
    void searchDone() -> a
    boolean hasStableIds() -> hasStableIds
org.tunesremote.PrefsActivity -> org.tunesremote.PrefsActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.tunesremote.SearchActivity -> org.tunesremote.SearchActivity:
    org.tunesremote.BackendService backend -> a
    org.tunesremote.daap.Session session -> b
    org.tunesremote.daap.Library library -> c
    java.lang.String query -> d
    android.content.ServiceConnection connection -> j
    android.os.Handler resultsUpdated -> e
    android.widget.ListView list -> f
    org.tunesremote.SearchActivity$SearchAdapter adapter -> g
    android.graphics.Bitmap blank -> h
    java.util.Map memcache -> i
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.SearchActivity$1 -> org.tunesremote.bg:
    org.tunesremote.SearchActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.SearchActivity$2 -> org.tunesremote.bh:
    org.tunesremote.SearchActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.SearchActivity$3 -> org.tunesremote.bi:
    org.tunesremote.SearchActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.SearchActivity$4 -> org.tunesremote.bj:
    android.widget.AdapterView$AdapterContextMenuInfo val$info -> a
    org.tunesremote.SearchActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.SearchActivity$5 -> org.tunesremote.bk:
    java.lang.String val$artistName -> a
    org.tunesremote.SearchActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.SearchActivity$LoadPhotoTask -> org.tunesremote.bl:
    org.tunesremote.SearchActivity this$0 -> a
    java.lang.Object[] doInBackground(java.lang.Object[]) -> c
    void end(java.lang.Object) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> a
org.tunesremote.SearchActivity$SearchAdapter -> org.tunesremote.bm:
    android.view.LayoutInflater inflater -> h
    org.tunesremote.daap.Library library -> a
    java.lang.String search -> b
    java.util.List results -> i
    long totalResults -> c
    android.view.View footerView -> d
    boolean firstFetch -> j
    boolean fetchRequested -> k
    boolean scrolling -> e
    java.lang.Object scrollWait -> f
    org.tunesremote.SearchActivity this$0 -> g
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    void triggerPage() -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
org.tunesremote.SearchActivity$SearchAdapter$1 -> org.tunesremote.bn:
    org.tunesremote.SearchActivity$SearchAdapter this$1 -> a
    void run() -> run
org.tunesremote.TagListener -> org.tunesremote.bo:
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
org.tunesremote.TracksActivity -> org.tunesremote.TracksActivity:
    org.tunesremote.BackendService backend -> a
    org.tunesremote.daap.Session session -> b
    org.tunesremote.daap.Library library -> c
    org.tunesremote.TracksActivity$TracksAdapter adapter -> d
    java.lang.String albumid -> e
    boolean allAlbums -> f
    java.lang.String artist -> g
    java.lang.String playlistId -> h
    java.lang.String playlistPersistentId -> i
    android.content.ServiceConnection connection -> k
    android.os.Handler resultsUpdated -> j
    void onStart() -> onStart
    void onStop() -> onStop
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
org.tunesremote.TracksActivity$1 -> org.tunesremote.bp:
    org.tunesremote.TracksActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
org.tunesremote.TracksActivity$2 -> org.tunesremote.bq:
    org.tunesremote.TracksActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.TracksActivity$3 -> org.tunesremote.br:
    org.tunesremote.TracksActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.tunesremote.TracksActivity$4 -> org.tunesremote.bs:
    java.lang.String val$containerItemId -> a
    org.tunesremote.TracksActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$5 -> org.tunesremote.bt:
    org.tunesremote.TracksActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$6 -> org.tunesremote.bu:
    org.tunesremote.TracksActivity this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$7 -> org.tunesremote.bv:
    android.widget.AdapterView$AdapterContextMenuInfo val$info -> a
    org.tunesremote.TracksActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$8 -> org.tunesremote.bw:
    java.lang.String val$trackid -> a
    org.tunesremote.TracksActivity this$0 -> b
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.tunesremote.TracksActivity$TracksAdapter -> org.tunesremote.bx:
    android.view.LayoutInflater inflater -> b
    java.util.List results -> a
    java.text.SimpleDateFormat format -> c
    java.util.Date date -> d
    org.tunesremote.TracksActivity this$0 -> e
    void foundTag$535923e9(org.tunesremote.daap.Response) -> a
    void searchDone() -> a
    java.lang.Object getItem(int) -> getItem
    boolean hasStableIds() -> hasStableIds
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.tunesremote.WizardActivity -> org.tunesremote.WizardActivity:
    int[] STEPS -> b
    android.widget.ViewFlipper flipper -> a
    android.widget.Button next -> c
    android.widget.Button prev -> d
    void onCreate(android.os.Bundle) -> onCreate
    boolean isFirstDisplayed() -> a
    boolean isLastDisplayed() -> b
    void updateButtons() -> c
org.tunesremote.WizardActivity$1 -> org.tunesremote.by:
    org.tunesremote.WizardActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.WizardActivity$2 -> org.tunesremote.bz:
    org.tunesremote.WizardActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.tunesremote.daap.Library -> org.tunesremote.a.a:
    java.util.regex.Pattern MLIT_PATTERN -> a
    org.tunesremote.daap.Session session -> b
    long readSearch(org.tunesremote.TagListener,java.lang.String,long,long) -> a
    void readArtists(org.tunesremote.TagListener) -> a
    void readAlbums(org.tunesremote.TagListener,java.lang.String) -> a
    void readTracks(java.lang.String,org.tunesremote.TagListener) -> a
    void readAllTracks(java.lang.String,org.tunesremote.TagListener) -> b
    void readPlaylists(org.tunesremote.PlaylistsAdapter) -> a
    void readPlaylist(java.lang.String,org.tunesremote.TagListener) -> c
    void readNowPlaying(java.lang.String,org.tunesremote.TagListener) -> d
org.tunesremote.daap.PairingServer -> org.tunesremote.a.b:
    byte[] CHAR_TABLE -> a
    byte[] PAIRING_RAW -> b
    android.os.Handler paired -> c
    java.net.ServerSocket server -> d
    java.util.Random random -> e
    void destroy() -> destroy
    void run() -> run
    java.lang.String toHex(byte[]) -> a
org.tunesremote.daap.Playlist -> org.tunesremote.a.c:
    long ID -> a
    java.lang.String name -> b
    java.lang.String persistentId -> c
    long count -> d
    long getID() -> a
    java.lang.String getName() -> b
    java.lang.String getPersistentId() -> c
    long getCount() -> d
org.tunesremote.daap.RequestHelper -> org.tunesremote.a.d:
    org.tunesremote.daap.Response requestParsed(java.lang.String,boolean) -> a
    void attemptRequest(java.lang.String) -> a
    byte[] request(java.lang.String,boolean) -> b
    android.graphics.Bitmap requestThumbnail(org.tunesremote.daap.Session,int) -> a
    android.graphics.Bitmap requestBitmap(java.lang.String) -> b
org.tunesremote.daap.Response -> org.tunesremote.a.e:
    org.tunesremote.daap.Response getNested(java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> b
    java.math.BigInteger getNumber(java.lang.String) -> g
    long getNumberLong(java.lang.String) -> c
    java.lang.String getNumberString(java.lang.String) -> d
    java.lang.String getNumberHex(java.lang.String) -> e
    java.util.List findArray(java.lang.String) -> f
org.tunesremote.daap.ResponseParser -> org.tunesremote.a.f:
    java.util.regex.Pattern BRANCHES -> a
    java.util.regex.Pattern STRINGS -> b
    int performSearch(byte[],org.tunesremote.TagListener,java.util.regex.Pattern,boolean) -> a
    org.tunesremote.daap.Response performParse(byte[],org.tunesremote.TagListener,java.util.regex.Pattern) -> a
    org.tunesremote.daap.Response performParse(byte[]) -> a
    int search(java.io.DataInputStream,org.tunesremote.TagListener,java.util.regex.Pattern,int,boolean) -> a
    org.tunesremote.daap.Response parse(java.io.DataInputStream,org.tunesremote.TagListener,java.util.regex.Pattern,int) -> a
    java.lang.String readString(java.io.DataInputStream,int) -> a
org.tunesremote.daap.Session -> org.tunesremote.a.g:
    java.lang.String host -> d
    org.tunesremote.daap.Status singleton -> e
    java.lang.String sessionId -> a
    long databaseId -> b
    long musicId -> f
    java.lang.String databasePersistentId -> g
    java.util.List playlists -> c
    org.tunesremote.daap.Status singletonStatus(android.os.Handler) -> a
    java.lang.String getRequestBase() -> a
    void purgeAllStatus() -> b
    void notifyStatus() -> c
    void controlPlayPause() -> d
    void controlNext() -> e
    void controlPrev() -> f
    void controlVolume(long) -> a
    void controlProgress(int) -> a
    void controlShuffle(int) -> b
    void controlRepeat(int) -> c
    void controlPlayAlbum(java.lang.String,int) -> a
    void controlQueueAlbum(java.lang.String) -> a
    void controlPlayArtist(java.lang.String,int) -> b
    void controlQueueArtist(java.lang.String) -> b
    void controlQueueTrack(java.lang.String) -> c
    void controlPlaySearch(java.lang.String,int) -> c
    void controlPlayPlaylist(java.lang.String,java.lang.String) -> a
    void controlPlayIndex(java.lang.String,int) -> d
org.tunesremote.daap.Session$1 -> org.tunesremote.a.h:
    java.lang.String val$url -> a
    boolean val$notify -> b
    void run() -> run
org.tunesremote.daap.Session$2 -> org.tunesremote.a.i:
    java.lang.String val$albumid -> a
    int val$tracknum -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Session$3 -> org.tunesremote.a.j:
    java.lang.String val$albumid -> a
    org.tunesremote.daap.Session this$0 -> b
    void run() -> run
org.tunesremote.daap.Session$4 -> org.tunesremote.a.k:
    java.lang.String val$encodedArtist -> a
    int val$encodedIndex -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Session$5 -> org.tunesremote.a.l:
    java.lang.String val$encodedArtist -> a
    org.tunesremote.daap.Session this$0 -> b
    void run() -> run
org.tunesremote.daap.Session$6 -> org.tunesremote.a.m:
    java.lang.String val$track -> a
    org.tunesremote.daap.Session this$0 -> b
    void run() -> run
org.tunesremote.daap.Session$7 -> org.tunesremote.a.n:
    java.lang.String val$encodedSearch -> a
    int val$index -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Session$8 -> org.tunesremote.a.o:
    java.lang.String val$databasePersistentId -> a
    java.lang.String val$playlistPersistentId -> b
    java.lang.String val$containerItemId -> c
    org.tunesremote.daap.Session this$0 -> d
    void run() -> run
org.tunesremote.daap.Session$9 -> org.tunesremote.a.p:
    int val$tracknum -> a
    java.lang.String val$albumid -> b
    org.tunesremote.daap.Session this$0 -> c
    void run() -> run
org.tunesremote.daap.Status -> org.tunesremote.a.q:
    boolean coverEmpty -> a
    android.graphics.Bitmap coverCache -> b
    java.lang.String albumId -> c
    int repeatStatus -> d
    int shuffleStatus -> e
    int playStatus -> f
    java.util.concurrent.atomic.AtomicBoolean destroyThread -> g
    java.lang.String trackName -> h
    java.lang.String trackArtist -> i
    java.lang.String trackAlbum -> j
    long progressTotal -> k
    long progressRemain -> l
    org.tunesremote.daap.Session session -> m
    android.os.Handler update -> n
    java.util.concurrent.atomic.AtomicInteger failures -> o
    long revision -> p
    java.lang.Thread progress -> q
    java.lang.Thread keepalive -> r
    void updateHandler(android.os.Handler) -> a
    void destroy() -> a
    void fetchUpdate() -> b
    void parseUpdate(org.tunesremote.daap.Response) -> a
    long getVolume() -> c
    int getProgress() -> d
    int getRemaining() -> e
    int getProgressTotal() -> f
    int getShuffle() -> g
    int getRepeat() -> h
    int getPlayStatus() -> i
    java.lang.String getTrackName() -> j
    java.lang.String getTrackArtist() -> k
    java.lang.String getTrackAlbum() -> l
    long access$022(org.tunesremote.daap.Status,long) -> a
    android.os.Handler access$100(org.tunesremote.daap.Status) -> a
    long access$000(org.tunesremote.daap.Status) -> b
    org.tunesremote.daap.Session access$200(org.tunesremote.daap.Status) -> c
    long access$300(org.tunesremote.daap.Status) -> d
    java.util.concurrent.atomic.AtomicInteger access$400() -> m
org.tunesremote.daap.Status$1 -> org.tunesremote.a.r:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.daap.Status$2 -> org.tunesremote.a.s:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.daap.Status$3 -> org.tunesremote.a.t:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.daap.Status$4 -> org.tunesremote.a.u:
    org.tunesremote.daap.Status this$0 -> a
    void run() -> run
org.tunesremote.util.PairingDatabase -> org.tunesremote.util.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    java.lang.String findCode(java.lang.String,java.lang.String) -> b
    java.lang.String findCodeLibrary(java.lang.String) -> a
    java.lang.String findCodeAddress(java.lang.String) -> b
    void deleteAll() -> a
    void insertCode(java.lang.String,java.lang.String,java.lang.String) -> a
    void updateAddress(java.lang.String,java.lang.String) -> a
org.tunesremote.util.RecentProvider -> org.tunesremote.util.RecentProvider:
org.tunesremote.util.ThreadExecutor -> org.tunesremote.util.b:
    java.util.concurrent.BlockingQueue sWorkQueue -> a
    java.util.concurrent.ThreadFactory sThreadFactory -> b
    java.util.concurrent.ThreadPoolExecutor sExecutor -> c
    void runTask(java.lang.Runnable) -> a
org.tunesremote.util.ThreadExecutor$1 -> org.tunesremote.util.c:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.tunesremote.util.UserTask -> org.tunesremote.util.d:
    java.util.concurrent.BlockingQueue sWorkQueue -> a
    java.util.concurrent.ThreadFactory sThreadFactory -> b
    java.util.concurrent.ThreadPoolExecutor sExecutor -> c
    org.tunesremote.util.UserTask$InternalHandler sHandler -> d
    org.tunesremote.util.UserTask$WorkerRunnable mWorker -> e
    java.util.concurrent.FutureTask mFuture -> f
    org.tunesremote.util.UserTask$Status mStatus -> g
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    void end(java.lang.Object) -> a
    org.tunesremote.util.UserTask execute(java.lang.Object[]) -> b
    org.tunesremote.util.UserTask$InternalHandler access$200() -> a
    void access$300(org.tunesremote.util.UserTask,java.lang.Object) -> a
org.tunesremote.util.UserTask$1 -> org.tunesremote.util.e:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.tunesremote.util.UserTask$2 -> org.tunesremote.util.f:
    org.tunesremote.util.UserTask this$0 -> b
    java.lang.Object call() -> call
org.tunesremote.util.UserTask$3 -> org.tunesremote.util.g:
    org.tunesremote.util.UserTask this$0 -> a
    void done() -> done
org.tunesremote.util.UserTask$4 -> org.tunesremote.util.h:
    int[] $SwitchMap$org$tunesremote$util$UserTask$Status -> a
org.tunesremote.util.UserTask$InternalHandler -> org.tunesremote.util.i:
    void handleMessage(android.os.Message) -> handleMessage
org.tunesremote.util.UserTask$Status -> org.tunesremote.util.j:
    org.tunesremote.util.UserTask$Status PENDING -> a
    org.tunesremote.util.UserTask$Status RUNNING -> b
    org.tunesremote.util.UserTask$Status FINISHED -> c
    org.tunesremote.util.UserTask$Status[] $VALUES -> d
    org.tunesremote.util.UserTask$Status[] values() -> values
    org.tunesremote.util.UserTask$Status valueOf(java.lang.String) -> valueOf
org.tunesremote.util.UserTask$UserTaskResult -> org.tunesremote.util.k:
    org.tunesremote.util.UserTask mTask -> a
    java.lang.Object[] mData -> b
org.tunesremote.util.UserTask$WorkerRunnable -> org.tunesremote.util.l:
    java.lang.Object[] mParams -> a
